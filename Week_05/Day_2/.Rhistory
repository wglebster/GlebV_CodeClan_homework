aes(x = Time, y = weight, group = Chick, colour = Diet) +
geom_line() +
facet_wrap(~ Diet, ncol = 4) # ~ means "varis with" or "depending on"
benefits
ggplot(benefits) +
aes(age) +
geom_histogram(col = "white")  +
facet_wrap(~sex, nrow = 2)
ggplot(benefits) +
geom_histogram(aes(x = age, fill = sex), col = "white") +
facet_grid(married ~ sex) #rows ~ columns
ggplot(benefits) +
geom_histogram(aes(x = age), col = "white", fill = "dark green") +
facet_grid(married ~ dkids, labeller = "label_both")
ggplot(benefits) +
geom_histogram(aes(x = age), col = "white", fill = "dark green") +
facet_wrap(~sex, ncol = 2, scales = "free")
library(tidyverse)
benefits <- benefits %>%
mutate(
tenure_interval = cut_interval(tenure, 4),
tenure_width = cut_width(tenure, 15),
tenure_number = cut_number(tenure, 4)
)
ggplot(benefits) +
geom_histogram(aes(x = age), col = "white") +
facet_wrap(~tenure_interval)
ggplot(benefits) +
geom_histogram(aes(x = age), col = "white") +
facet_wrap(~tenure_number)
ggplot(pets) +
aes(age, weight, colour = sex) +
geom_point() +
scale_x_continuous(breaks = c(1, 6, 10),
labels = c("1" = "Baby",
"6" = "Grown up",
"10" = "Over the hill")) +
scale_y_continuous(breaks = c(6,8,10),
labels = c("6" = "Small",
"8" = "Medium",
"10" = "Large"))
library(scales)
ggplot(flatPrices) +
aes(x = Date, y = AvgFlatPrice) +
geom_line() +
ylab("average flat price \n") +
scale_y_continuous(labels = scales::dollar_format(prefix = "Â£"))
flatPrices <- flatPrices %>%
mutate(percent_change = AvgFlatPrice/AvgFlatPrice[1])
ggplot(flatPrices) +
aes(x = Date, y = percent_change) +
geom_line() +
scale_y_continuous(labels = scales::percent) +
ylab("percent change relative to start \n")
ggplot(pets, aes(age, weight)) +
geom_point(aes(colour = sex), size = 4) +
scale_x_continuous(
name = "Age",
breaks = seq(13),
limits = c(1,8)
) +
scale_y_continuous(
name = "Weight",
breaks = c(6, 8, 10),
labels = c(
"6" = "Light",
"8" = "Normal",
"10" = "Heavy"
),
limits = c(1,8)
)
ggplot(whisky) +
aes(x = YearFound, y = Capacity, color = Region) +
geom_point() +
#scale_x_reverse()
scale_y_continuous(trans = "log10")
ggplot(whisky) +
aes(x = YearFound, fill = Region) +
geom_histogram(bins = 30) +
#coord_flip()
coord_fixed()
snacks <- data.frame(
group = c("Cakes", "Biscuits", "Jaffa Cakes"),
count = c(30, 50, 20)
)
ggplot(snacks) +
aes(x = " ", y = count, fill = group) +
geom_bar(width = 0.5, stat = "identity") +
xlab("biscuits") +
# to make a pie chart :
coord_polar("y")
ggplot(whisky) +
aes(x = YearFound, y = Capacity, colour = Region) +
geom_point(aes(colour = Region)) +
geom_smooth() +
xlim(1940,2000)
#coord_cartesian()
head(pets)
names(car_use)
ggplot(car_use) +
aes(x = population) +
geom_point(aes(y = car_use_percent, colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1)
ggplot(pets) +
aes(x = age, y = weight) +
geom_point(aes(colour = sex), size = 5) +
geom_text(aes(label = name),
nudge_x = 0.5,
nudge_y = 0.1)
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1)
#names(blood_pressure)
ggplot(blood_pressure) +
aes(x = daily_saturated_fat_intake_mg, y = systolic_blood_pressure_mm_hg) +
geom_point()
names(car_use)
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point() +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1)
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(fill = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1)
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1)
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
theme(legend.title = element_blank())
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
theme(legend.position = "none")
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
theme(legend.position = "none") +
annotate("The black line represents concentration of SO2 in the air ppm")
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
theme(legend.position = "none") +
annotate("The black line represents concentration of SO2 in the air ppm")
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
theme(legend.position = "none")
names(car_use)
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
labs(title = "Car use and SO2 concentration ")
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
labs(title = "Car use and SO2 concentration by population",
x = "Population",
y = "Percentage of car users")
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
labs(title = "Car use and SO2 concentration by population",
subtitle = "Rising broken line shows SO2 emissions ppm",
x = "Population",
y = "Percentage of car users")
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
labs(title = "Car use and SO2 concentration by population",
subtitle = "Rising broken line shows SO2 emissions ppm",
x = "Population",
y = "Percentage of car users") +
theme(legend.position = "none")
ggplot(d20_outcomes) +
aes(x = outcome) +
#geom_density()
geom_freqpoly(bins = 30)
ggplot(d20_outcomes) +
aes(x = outcome) +
#geom_density()
geom_freqpoly(bins = 30) +
labs(title = "Frequency of outcomes by count of each outcome")
ggplot(d20_outcomes) +
aes(x = outcome) +
#geom_density()
geom_freqpoly(bins = 30) +
labs(title = "Frequency of outcomes by count of each outcome") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d20x5_outcomes) +
aes(x = outcome) +
geom_density() +
#geom_freqpoly(bins = 30)
abs(title = "Frequency of outcomes by count of each outcome") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d20x5_outcomes) +
aes(x = outcome) +
geom_density() +
#geom_freqpoly(bins = 30)
labs(title = "Frequency of outcomes by count of each outcome") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(d20x5_outcomes) +
aes(x = outcome) +
geom_density() +
#geom_freqpoly(bins = 30)
labs(title = "Density of outcomes") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions")
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 0.1))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 1))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = -1))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 1))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 1.5))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 2))
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90))
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years")
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years",
x = "Liability type",
y = "Liability (millions)")
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years",
x = "Liability type",
y = "Liability (millions)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.3))
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years",
x = "Liability type",
y = "Liability (millions)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.4))
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years",
x = "Liability type",
y = "Liability (millions)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#view(pension_surplus)
#view(pension_surplus_ordered)
pension_surplus_ordered <- pension_surplus %>%
mutate(item_ordered = fct_reorder(item, balance, .desc = TRUE))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 2))
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years",
x = "Liability type",
y = "Liability (millions)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
ggplot(late_deliveries) +
aes(x = date, y = late_deliveries) +
labs(title = "Number of late deliveries by year",
x = "Year",
y = "Number of late deliveries") +
geom_point() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(late_deliveries) +
aes(x = date, y = late_deliveries) +
labs(title = "Number of late deliveries by year",
x = "Year",
y = "Number of late deliveries") +
geom_line() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(late_deliveries) +
aes(x = date, y = late_deliveries) +
labs(title = "Number of late deliveries by year",
x = "Year",
y = "Number of late deliveries") +
geom_point() +
geom_smooth() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(late_deliveries) +
aes(x = date, y = late_deliveries) +
labs(title = "Number of late deliveries by year",
x = "Year",
y = "Number of late deliveries") +
geom_point() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(recovery_times) +
aes(x = treatment_group, y = recovery) +
geom_bar(stat = "identity") +
facet_grid(~prognosis) +
labs(title = "Recovery duration in different treatment groups",
subtitle = "Split by prognosis",
x = "Treatment groups",
y = "Recovery duration (days)") +
theme(axis.text.x = element_text(angle = 20))
ggplot(fitness_levels) +
aes(x = fitness_score, y = age) +
geom_bar(stat = "identity") +
labs(title = "Fitness scores of students by age",
subtitle = "Split in 5 groups",
x = "Fitness score",
y = "Student age")+
facet_grid(group~.)
ggplot(fitness_levels) +
aes(x = fitness_score, y = age) +
geom_bar(stat = "identity") +
labs(title = "Fitness scores of students by age",
subtitle = "Split in 5 groups",
x = "Fitness score",
y = "Student age")+
coord_flip() +
facet_grid(group~.)
ggplot(fitness_levels) +
aes(x = fitness_score, y = age) +
geom_bar(stat = "identity") +
labs(title = "Fitness scores of students by age",
subtitle = "Split in 5 groups",
x = "Fitness score",
y = "Student age") +
facet_grid(group~.)
ggplot(blood_pressure) +
aes(x = daily_saturated_fat_intake_mg, y = systolic_blood_pressure_mm_hg) +
geom_point()
ggplot(car_use) +
aes(x = population, y = car_use_percent) +
geom_point(aes(colour = city)) +
geom_line(aes(y = air_so2_concentration_ppm)) +
geom_text(aes(label = city),
nudge_x = 0.5,
nudge_y = 0.1) +
labs(title = "Car use and SO2 concentration by population",
subtitle = "Rising broken line shows SO2 emissions ppm",
x = "Population",
y = "Percentage of car users") +
theme(legend.position = "none")
ggplot(d20_outcomes) +
aes(x = outcome) +
#geom_density()
geom_freqpoly(bins = 30) +
labs(title = "Frequency of outcomes by count of each outcome") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(pension_surplus_ordered) +
aes(x = item_ordered, y = balance) +
geom_col() +
coord_flip() +
labs(title = "Pension balance and other transactions from 2016 to 2019",
x = "Balance",
y = "Transactions") +
theme(plot.title = element_text(hjust = 2))
#view(pension_liabilities)
ggplot(pension_liabilities) +
aes(x = liability_type, y = liability_millions) +
geom_bar(stat = "identity") +
facet_grid(~year) +
theme(axis.text.x = element_text(angle = 90)) +
#coord_flip()
labs(title = "Pension liability types",
subtitle = "Split by every three years",
x = "Liability type",
y = "Liability (millions)") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
