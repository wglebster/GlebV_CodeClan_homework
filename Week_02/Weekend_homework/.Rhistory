"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
## clean_message(feedbacks_dataframe$feedback_message)
score_message() <- function(clean_message(message())) {
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message_vactor <- clean_message(feedbacks_dataframe$feedback_message)
score_message() <- function(clean_message_vactor) {
score <- 0
ifelse(clean_message %in% positive_words, score <- score + 1, score)
#   if (clean_message(feedbacks_dataframe$feedback_message) %in%
#       positive_words) {
#       score <- score +1
# } else {
#       clean_message(feedbacks_dataframe$feedback_message) %in%
#       negative_words
#       score <- score - 1
# }
return(score)
}
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message_vactor <- clean_message(feedbacks_dataframe$feedback_message)
score_message() <- function(clean_message_vactor) {
score <- 0
ifelse(clean_message %in% positive_words, score <- score + 1, score)
#   if (clean_message(feedbacks_dataframe$feedback_message) %in%
#       positive_words) {
#       score <- score +1
# } else {
#       clean_message(feedbacks_dataframe$feedback_message) %in%
#       negative_words
#       score <- score - 1
# }
return(score)
}
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message_vactor <- clean_message(feedbacks_dataframe$feedback_message)
score <- ifelse(clean_message %in% positive_words, score <- score + 1, score)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message_vactor <-  c(clean_message(feedbacks_dataframe$feedback_message))
clean_message_vactor
score <- ifelse(clean_message %in% positive_words, score <- score + 1, score)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message_vactor <-  c(clean_message(feedbacks_dataframe$feedback_message))
clean_message_vactor
score <- ifelse(clean_message %in% positive_words, score <- score + 1, score)
?sapply
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message
# score_message() <- function(clean_message_vactor) {
#   score <- 0
#   ifelse(clean_message %in% positive_words, score <- score + 1, score)
# #   if (clean_message(feedbacks_dataframe$feedback_message) %in%
# #       positive_words) {
# #       score <- score +1
# # } else {
# #       clean_message(feedbacks_dataframe$feedback_message) %in%
# #       negative_words
# #       score <- score - 1
# # }
#      return(score)
#  }
# score_message(clean_message(feedbacks_dataframe$feedback_message))
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(eedbacks_dataframe$feedback_message)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(fedbacks_dataframe$feedback_message)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(fedbacks_dataframe$feedback_message)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(fedbacks_dataframe$feedback_message)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
#feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(fedbacks_dataframe$feedback_message)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(fedbacks_dataframe$feedback_message)
library(RPostgreSQL)
credentials_location <- paste0(Sys.getenv("HOME"),"/credentials.R")
source(credentials_location)
db_conect <- dbConnect(drv = PostgreSQL(), user = postgresql_username, password = postgresql_password, dbname = "acme_employees", host = "localhost")
#rm(postgresql_username, postgresql_password, remote_omni_postgresql_password, remote_omni_postgresql_username)
dbListTables(conn = db_conect)
dbListFields(conn = db_conect, name = "teams" )
emlpoyees_dataframe <- dbGetQuery(db_conect, "SELECT * FROM employees")
emlpoyees_dataframe
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(fedbacks_dataframe$feedback_message)
rm(postgresql_username, postgresql_password, remote_omni_postgresql_password, remote_omni_postgresql_username)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
## First we obtained the feedbacks, with matching employees and their teams together in one dataframe.
feedbacks_dataframe <- dbGetQuery(conn = db_conect, statement =
"SELECT
employees.first_name,
employees.last_name,
teams.name AS team_name,
feedbacks.message AS feedback_message
FROM employees FULL OUTER JOIN feedbacks
ON employees.id = feedbacks.employee_id
INNER JOIN teams
ON employees.team_id = teams.id
WHERE feedbacks.message IS NOT NULL")
feedbacks_dataframe
## Next we split our solution code into two functions: clean_message() and score_message(), and ran these successively for each message stored in the database, storing the scores as we go.
clean_message <- function(message) {
lowercase_message <- tolower(message)
gsub("[[:punct:]]+", " ", x = lowercase_message)
}
clean_message(feedbacks_dataframe$feedback_message)
# score_message() <- function(clean_message_vactor) {
#   score <- 0
#   ifelse(clean_message %in% positive_words, score <- score + 1, score)
# #   if (clean_message(feedbacks_dataframe$feedback_message) %in%
# #       positive_words) {
# #       score <- score +1
# # } else {
# #       clean_message(feedbacks_dataframe$feedback_message) %in%
# #       negative_words
# #       score <- score - 1
# # }
#      return(score)
#  }
# score_message(clean_message(feedbacks_dataframe$feedback_message))
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
combine_vector <- c(positive_words, negative_words)
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
combine_vector <- c(positive_words, negative_words)
combine_vector
positive_words <- c("great", "good", "happy", "content", "fulfilled", "fulfilled", "positive", "positives", "cheerful", "nice", "ambition", "ambitions", "ambitious", "friendly", "progress", "joy", "fast", "achieve", "achieving", "achievements", "best", "better",  "unlimited", "pros", "competitive", "opportunity", "advancement", "friendly", "smart", "interesting", "challenging", "grow", "caring", "balance", "helpful")
negative_words <- c("worse", "worsening", "worst", "slow", "sluggish", "impatient", "unfulfilled", "unfulfilling", "negative", "bad", "limited", "limit", "limitations", "cons", "frustrated", "frustrating", "frustration", "dull", "boring", "politics", "political", "ignore", "ignored", "ignoring", "sad", "depressed", "depressing", "nasty", "stress", "stresses", "stressed", "horrid", "horrible", "terrible", "deadline", "deadlines", "uncaring", "remote")
#combine_vector <- c(positive_words, negative_words)
rm(combine_vector)
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
score <- 0
score_message <- function() {
sapply(positive_words, clean_message(message)  sum(responseTimes<=x))
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
score <- 0
score_message <- function() {
sapply(positive_words, clean_message(message), score <- score + 1)
}
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
score <- 0
score_message <- function() {
sapply(positive_words, clean_message(message), score <- score + 1)
}
score_message()
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
score <- 0
score_message <- function() {
sapply(positive_words, clean_message(message), score <- score + 1)
return(score)
}
score_message()
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
# score <- 0
# score_message <- function() {
#   sapply(positive_words, clean_message(message), score <- score + 1)
#   return(score)
#   }
# score_message()
messages_list <- list(feedbacks_dataframe$feedback_message)
messages_list
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
# score <- 0
# score_message <- function() {
#   sapply(positive_words, clean_message(message), score <- score + 1)
#   return(score)
#   }
# score_message()
messages_list <- list(clean_message())
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
# score <- 0
# score_message <- function() {
#   sapply(positive_words, clean_message(message), score <- score + 1)
#   return(score)
#   }
# score_message()
messages_list <- list(clean_message(feedbacks_dataframe$feedback_message))
messages_list
for (index in messages_list) {
score <-0
if(messages_list[[1]][index] %in% positive_words)
score <- score + 1
}
for (index in messages_list) {
score <-0
if(messages_list[[index]][index] %in% positive_words)
score <- score + 1
}
for (index in messages_list) {
score <-0
if(messages_list[[index]] %in% positive_words)
score <- score + 1
}
for (index in messages_list) {
score <-0
if(messages_list[index] %in% positive_words)
score <- score + 1
}
for (index < length(messages_list) in messages_list) {
clean_message(feedbacks_dataframe$feedback_message) %in% positive_words
clean_message(feedbacks_dataframe$feedback_message) %in% negative_words
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
# score <- 0
# score_message <- function() {
#   sapply(positive_words, clean_message(message), score <- score + 1)
#   return(score)
#   }
# score_message()
messages_list <- list(clean_message(feedbacks_dataframe$feedback_message))
## You will want to add the scores as a column in your dataframe containing feedbacks, employees and teams
# score <- 0
# score_message <- function() {
#   sapply(positive_words, clean_message(message), score <- score + 1)
#   return(score)
#   }
# score_message()
messages_list <- list(clean_message(feedbacks_dataframe$feedback_message))
messages_list %in% negative_words
negative_words %in% messages_list
for (elem in messages_list) {
if (is.character(elem)) {
if (length(elem) > 1) {
print(paste(elem, collapse = " "))
} else {
print(elem)
}
}
}
for (elem in messages_list) {
positive_words %in% elem
}
for (elem in messages_list) {
positive_words %in% elem
return(TRUE)
}
for (elem in messages_list) {
print(positive_words %in% elem)
}
clean_message(Slow advancement, political, and inconsistent expectations)
clean_message("Slow advancement, political, and inconsistent expectations")
clean_message("Slow advancement, political, and inconsistent expectations") %in% positive_words
clean_message("Slow advancement, political, and inconsistent expectations") %in% negative_words
clean_message("Slow advancement, political, and inconsistent expectations") %in% negative_words
class(clean_message("Slow advancement, political, and inconsistent expectations") )
data2
