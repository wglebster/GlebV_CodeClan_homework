scotland_s
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s # this produces a list
scotland_df <- as.data.frame(scotland_s)
scotland_df
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s # this produces a list
scotland_df <- data.frame(scotland_s)
scotland_df
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s
rm(scotland_df)
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s
#this file seems to be delimited by tab and ";"
scotland_s <- sapply(scotland, strsplit, split = ";")
scotland_s
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s
#this file seems to be delimited by tab and ";"
scotland_s <- apply(scotland, strsplit, split = ";")
#this file seems to be delimited by tab and ";"
scotland_s <- lapply(scotland, strsplit, split = ";")
scotland_s
#this file seems to be delimited by tab and ";" and it has "Edinburgh" in the first row. I can convert it to list, without losing "Edinburgh"
scotland_list <- lapply(scotland, strsplit, split = ";")
scotland_list
rm(scotland_s)
#this file seems to be delimited by tab and ";" and it has "Edinburgh" in the first row. I can convert it to list, without losing "Edinburgh"
scotland_list <- lapply(scotland, strsplit, split = ";")
scotland_list
#alternatively I can skip the first row and do away with "Edinburgh"
scotland_df <- read_delim("data/scotland.txt", skip = 1, delim = ";")
scotland_df
s_v <- read_file("data/scotland.txt")
s_v
s_v <- read_file("data/scotland.txt")
#s_v
sv <- read_delim(s_v, delim = ";")
sv
s_v <- read_file("data/scotland.txt")
s_v
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical
#read in file skipping first 4 rows and changing variable type
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols(bought online = col_logical()))
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical. Variable "bought online" will not read in R
#read in file skipping first 4 rows and changing variable type
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
steam_raw
#import library "readr"
library(readr)
library(dplyr)
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type, rename variables to easier processing in the future
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()), col_names = recode("customer id" = "customer_id",
"game name" = "game_name",
"bought online" = "bought_online"))
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type, rename variables to easier processing in the future
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()), col_names = recode("customer id" = "customer_id",
"game name" = "game_name",
"bought online" = "bought_online"))
?recode
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type, rename variables to easier processing in the future
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()), col_names = recode(steam_raw, "customer id" = "customer_id",
"game name" = "game_name",
"bought online" = "bought_online"))
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type, rename variables to easier processing in the future
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
steam_raw
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename(`customer id` = `customer_id` , `game name` = `game_name`, `bought online` = `bought_online`)
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename(`customer id` = customer_id, `game name` = game_name, `bought online` = bought_online)
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename(`customer id` = "customer_id", `game name` = "game_name", `bought online` = "bought_online")
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename(`customer id` = "customer_id", `game name` = "game_name", `bought online` = "bought_online")
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
#steam_raw %>% rename(`customer id` = "customer_id", `game name` = "game_name", `bought online` = "bought_online")
steam_raw
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename(`customer id` = customer_id, `game name` = game_name, `bought online` = bought_online)
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename("customer id" = customer_id, "game name" = game_name, "bought online" = bought_online)
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename("customer id" = "customer_id", "game name" = "game_name", "bought online" = "bought_online")
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw %>% rename("customer id" = "customer_id", "game name" = "game_name", "bought online" = "bought_online")
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw
data.table::setnames(steam_raw, old = c("customer id", "game name", "bought online"),
new = c("customer_id", "game_name", "bought_online"))
#%>% rename( = "",  = "",  = "")
steam_raw
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
steam_raw
data.table::setnames(steam_raw, old = c("customer id", "game name", "bought online"),
new = c("customer_id", "game_name", "bought_online"))
steam_raw
#open file in excel, first 4 rows have unneccessary data, variable "bought online" should be logical.
#read in file skipping first 4 rows and changing variable type.
steam_raw <- read_csv("data/steam-200k-sample.csv", skip = 4, col_types = cols("bought online" = col_logical()))
#rename variables (columns) for easier processing in the future.
data.table::setnames(steam_raw, old = c("customer id", "game name", "bought online"),
new = c("customer_id", "game_name", "bought_online"))
steam_raw
eu_payments <- read_tsv("data/historic_eu_payments.tsv")
eu_payments
eu_payments <- read_tsv("data/historic_eu_payments.tsv")
eu_payments
#import library "readr"
library(readr)
library(dplyr)
#load JSON library too
library(jsonlite)
#import library "readr"
library(readr)
library(dplyr)
#load JSON library too
library(jsonlite)
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
prettify(jsread)
#jsread
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread <- data.frame(prettify(jsread))
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_list <- prettify(jsread)
jsread
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_list <- prettify(jsread)
jsread_list
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_list <- prettify(jsread)
jsread_df <- as.data.frame(jsread_list)
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_list <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_parse
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_df <- fromJSON(jsread)
jsread_df
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_list <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_parse
#import library "readr"
library(readr)
library(dplyr)
#load JSON library too
library(jsonlite)
#load library to deal with excel
library(readxl)
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
num_steets
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
while (sheet <= num_steets) {
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
sheet + 1
}
sheet <- 1
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
while (sheet <= num_steets) {
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
sheet + 1
}
sheet <- 1
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
while (sheet <= 8) {
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
sheet + 1
}
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
for(sheet in sheets) {
if(sheet <= num_steets){
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
sheet + 1
}
}
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
for(sheet in all_sheets) {
if(sheet <= num_steets){
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
sheet + 1
}
}
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
for(sheet in all_sheets) {
if(sheet <= num_steets){
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
sheet + 1
}
}
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
for(sheet in all_sheets) {
if(sheet <= num_steets){
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
#sheet + 1
}
}
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
num_steets <- length(excel_sheets("data/green_bindle_consulting.xlsx"))
all_sheets <- c()
for(sheet in gbc) {
if(sheet <= num_steets){
read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
all_sheets <- c(all_sheets, sheet)
#sheet + 1
}
}
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
gbc <- read_xlsx("data/green_bindle_consulting.xlsx", sheet = sheet)
c(1, 4, 6, 3)
numbers <- c(1, 4, 6, 3)
numbers
more_numbers <- c(1, 1, 6, 2, 3, 3, 2, 6)
many_numbers <- c(numbers, more_numbers)
many_numbers
is.vector(5)
c(1L, 4L, 6L, 3L)
numbers + 5
numbers * 2
primes_integer <- c(2L, 3L, 5L, 7L, 11L, 13L, 17L)
primes_integer
primes_integer * 10
class(primes_integer)
numbers + 5
c(1, 2) + c(1, 2, 3, 4)
c("a", "a", "b", "a")
as.factor(c("a", "a", "b", "a"))
letters <- factor(c("a", "a", "b", "a"), ordered = TRUE)
letters[3] > letters[2]
x <- 2.456
class(x)
x <- 2L
class(x)
x <- "hello world"
class(x)
x <- factor("hello world")
class(x)
x <- TRUE
class(x)
# start with a numeric vector
test_scores <- c(10, 12, 16, 1, 9)
class(test_scores)
# use the as.character() function to convert it to character type
char_example <- as.character(test_scores)
class(char_example)
# finally, convert char_example back to numeric type
numeric_example <- as.numeric(char_example)
class(numeric_example)
# make a vector with three numeric values
a <- c(2, 3, 5)
# calculate the mean
sum(a) / length(a)
# make a vector with three character values
a <- c("2", "3", "5")
# calculate the mean
sum(a) / length(a)
c(1, 4, 6, 3)
numbers <- c(1, 4, 6, 3)
numbers
more_numbers <- c(1, 1, 6, 2, 3, 3, 2, 6)
many_numbers <- c(numbers, more_numbers)
many_numbers
is.vector(5)
c(1L, 4L, 6L, 3L)
numbers + 5
numbers * 2
primes_integer <- c(2L, 3L, 5L, 7L, 11L, 13L, 17L)
primes_integer
primes_integer * 10
class(primes_integer)
numbers + 5
c(1, 2) + c(1, 2, 3, 4)
c("a", "a", "b", "a")
as.factor(c("a", "a", "b", "a"))
letters <- factor(c("a", "a", "b", "a"), ordered = TRUE)
letters[3] > letters[2]
x <- 2.456
class(x)
x <- 2L
class(x)
x <- "hello world"
class(x)
x <- factor("hello world")
class(x)
x <- TRUE
class(x)
# start with a numeric vector
test_scores <- c(10, 12, 16, 1, 9)
class(test_scores)
# use the as.character() function to convert it to character type
char_example <- as.character(test_scores)
class(char_example)
# finally, convert char_example back to numeric type
numeric_example <- as.numeric(char_example)
class(numeric_example)
# make a vector with three numeric values
a <- c(2, 3, 5)
# calculate the mean
sum(a) / length(a)
# make a vector with three character values
a <- c("2", "3", "5")
# calculate the mean
sum(a) / length(a)
#this is code I found on StackOverflow
#these functions use the library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
#Tidyverse tibble can be used (the default with read_excel), then should be tibble = TRUE
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
return(x)
}
#this is code I found on StackOverflow
#these functions use the library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
#Tidyverse tibble can be used (the default with read_excel), then should be tibble = TRUE
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
return(x)
}
read_excel_allsheets("data/green_bindle_consulting.xlsx")
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_parse
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread_df1
#this file seems to be delimited by tab and ";" and it has "Edinburgh" in the first row. I can convert it to list, without losing "Edinburgh"
scotland_list <- lapply(scotland, strsplit, split = ";")
#import library "readr"
library(readr)
library(dplyr)
#load JSON library too
library(jsonlite)
#load library to deal with excel
library(readxl)
head(read_csv("data/state_income_data.csv")) #read file
#skip one (first row of the raw dataset, specify custom variable names (column names),  making sure that total number of variables(columns) matches the raw dataset
state_income_data <- read_csv("data/state_income_data.csv", skip = 1,
col_names = c("first_letter", "state", "2002", "2003",
"2004", "2005", "2006",
"2007", "2008", "2009", "2010", "2011",
"2012", "2013", "2014", "2015"))
state_income_data
#load raw file
cars_raw <- read_csv("data/cars.csv")
#check variable types first
str(cars_raw)
#variable types are alreay specified correctly, except for variable "vs", change it to logical type
#read in cars dataset and change variable vs type to logical
cars_raw <- read_csv("data/cars.csv", col_types = cols(vs = col_logical()))
hcars_raw
#this file seems to be delimited by tab and ";" and it has "Edinburgh" in the first row. I can convert it to list, without losing "Edinburgh"
scotland_list <- lapply(scotland, strsplit, split = ";")
#read file and assign it to object "scotland"
scotland <- read_tsv("data/scotland.txt")
scotland
#this file seems to be delimited by tab and ";" and it has "Edinburgh" in the first row. I can convert it to list, without losing "Edinburgh"
scotland_list <- lapply(scotland, strsplit, split = ";")
scotland_list
#alternatively I can skip the first row and do away with "Edinburgh"
scotland_df <- read_delim("data/scotland.txt", skip = 1, delim = ";")
scotland_df
s_v <- read_delim("data/scotland.txt", delim = "\n")
s_v
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
#jsread_pretty <- prettify(jsread)
#jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
#jsread_pretty <- prettify(jsread)
#jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
#jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread_df
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread_df1
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread_df1
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread_df1
jsread <- read_file("http://makemeanalyst.com/wp-content/uploads/2017/06/sample_json.txt")
jsread_pretty <- prettify(jsread)
jsread_parse <- parse_json(jsread)
jsread_df <- fromJSON(jsread)
jsread_df1 <- lapply(jsread_parse, as.data.frame)
jsread_df
#this is code I found on StackOverflow
#these functions use the library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
#Tidyverse tibble can be used (the default with read_excel), then should be tibble = TRUE
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.list)
names(x) <- sheets
return(x)
}
read_excel_allsheets("data/green_bindle_consulting.xlsx")
#this is code I found on StackOverflow
#these functions use the library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
#Tidyverse tibble can be used (the default with read_excel), then should be tibble = TRUE
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x,  as.data.frame) #can be output as list: lapply(x,  as.list)
names(x) <- sheets
return(x)
}
read_excel_allsheets("data/green_bindle_consulting.xlsx")
