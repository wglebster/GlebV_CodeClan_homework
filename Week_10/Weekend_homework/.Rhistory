BIC = round(digits = 4, BIC(model_2))
)
model_compare
summary(model_2)
par(mfrow = c(2,2))
plot(model_2)
model_compare <- model_compare %>%
add_row(model = "model_1",
Adj_R_sq = round(digits = 4, summary(model_1)$adj.r.squared),
AIC = round(digits = 4, AIC(model_1)),
BIC = round(digits = 4, BIC(model_1))
)
model_compare
model_compare <- model_compare %>%
add_row(model = "model_1",
Adj_R_sq = round(digits = 4, summary(model_1)$adj.r.squared),
AIC = round(digits = 4, AIC(model_1)),
BIC = round(digits = 4, BIC(model_1))
)
rm(model_compare)
model_compare <- model_compare %>%
add_row(model = "model_1",
Adj_R_sq = round(digits = 4, summary(model_1)$adj.r.squared),
AIC = round(digits = 4, AIC(model_1)),
BIC = round(digits = 4, BIC(model_1))
)
#I can have an all model comparisons in a single tibble.
#I can use add_row to add data.
model_compare <- tibble(model = "test_1_model",
Adj_R_sq = round(digits = 4,summary(test_1_model)$adj.r.squared),
AIC = round(digits = 4, AIC(test_1_model)),
BIC = round(digits = 4, BIC(test_1_model))
)
model_compare
model_1 <- lm(average_price ~ type +
year + month + day_of_month + region, data = clean_avocado)
summary(model_1)
model_compare <- model_compare %>%
add_row(model = "model_1",
Adj_R_sq = round(digits = 4, summary(model_1)$adj.r.squared),
AIC = round(digits = 4, AIC(model_1)),
BIC = round(digits = 4, BIC(model_1))
)
model_compare
model_compare <- model_compare %>%
add_row(model = "model_2",
Adj_R_sq = round(digits = 4, summary(model_2)$adj.r.squared),
AIC = round(digits = 4, AIC(model_2)),
BIC = round(digits = 4, BIC(model_2))
)
model_compare
model_3 <- lm(average_price ~ type +
year:month + region, data = clean_avocado)
model_compare <- model_compare %>%
add_row(model = "model_3",
Adj_R_sq = round(digits = 4, summary(model_3)$adj.r.squared),
AIC = round(digits = 4, AIC(model_3)),
BIC = round(digits = 4, BIC(model_3))
)
model_compare
summary(model_3)
par(mfrow = c(2,2))
plot(model_3)
model_4 <- lm(average_price ~ type:region +
year:month, data = clean_avocado)
summary(model_4)
model_compare <- model_compare %>%
add_row(model = "model_4",
Adj_R_sq = round(digits = 4, summary(model_4)$adj.r.squared),
AIC = round(digits = 4, AIC(model_4)),
BIC = round(digits = 4, BIC(model_4))
)
model_compare
par(mfrow = c(2,2))
plot(model_4)
model_5 <- lm(average_price ~ type:region +
month, data = clean_avocado)
summary(model_5)
model_compare <- model_compare %>%
add_row(model = "model_5",
Adj_R_sq = round(digits = 4, summary(model_5)$adj.r.squared),
AIC = round(digits = 4, AIC(model_5)),
BIC = round(digits = 4, BIC(model_5))
)
model_compare
par(mfrow = c(2,2))
plot(model_5)
library(CodeClanData)
library(tidyverse)
savings
model_overfit <- lm(savings ~ ., data = savings)
model_wellfit <- lm(savings ~ salary + age + retired , data = savings)
model_underfit <- lm(savings ~ salary, data = savings)
summary(model_overfit)
summary(model_overfit)$adj.r.squared
AIC(model_overfit)
BIC(model_overfit)
library(broom)
glance(model_overfit)
summary(model_wellfit)
summary(model_wellfit)$adj.r.squared
AIC(model_wellfit)
BIC(model_wellfit)
glance(model_wellfit)
summary(model_underfit)
summary(model_underfit)$adj.r.squared
AIC(model_underfit)
BIC(model_underfit)
glance(model_underfit)
#find the size of data
n_data <- nrow(students_big) #912 rows
test_index <- sample(1:n_data, size = n_data*0.1)
test <- slice(students_big, test_index)
train <- slice(students_big, -test_index)
model <- lm(height ~ arm_span, data = train)
predictions <- predict(model, newdata = test)
median(abs(predictions - test$height))
#overfitted
over_n_data <- nrow(savings) #1200
over_test_index <- sample(1:over_n_data, size = over_n_data*0.1)
test_over <- slice(savings, over_test_index)
train_over <- slice(savings, -over_test_index)
#underfitted
under_n_data <- nrow(savings)
under_test_index <- sample(1:under_n_data, size = under_n_data*0.1)
test_under <- slice(savings, under_test_index)
train_under <- slice(savings, -under_test_index)
#wellfitted
well_n_data <- nrow(savings)
well_test_index <- sample(1:well_n_data, size = well_n_data*0.1)
test_well <- slice(savings, well_test_index)
train_well <- slice(savings, -well_test_index)
model_over <- lm(savings ~ ., data = train_over)
model_under <- lm(savings ~ salary, data = train_under)
model_well <- lm(savings ~ salary + age + retired, data = train_well)
predict_over <- predict(model_over, data = test_over)
predict_under <- predict(model_under, data = test_under)
predict_well <- predict(model_well, data = test_well)
#overfitted
median(abs(predict_over - test_over$savings))
#underfitted
median(abs(predict_under - test_under$savings))
#wellfitted
median(abs(predict_well - test_well$savings))
library(caret)
#cross validation 10 fold
cv_10_fold <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model<- train(savings ~ ., data = savings, trControl = cv_10_fold, method = "lm")
#all models are contained in model object
model$pred
model$resample
#MAE is median absolute error
mean(model$resample$RMSE)
mean(model$resample$Rsquared)
well_fitted_10_fold <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
well_fitted_10_fold_model<- train(savings ~ salary + age + retired, data = savings, trControl = well_fitted_10_fold, method = "lm")
mean(well_fitted_10_fold_model$resample$RMSE)
mean(well_fitted_10_fold_model$resample$Rsquared)
#instead of GGiraphe
library(mosaic)
plotModel(model_well)
library(leaps)
insurance
#need to establish how many variables and define it in nvmax
reg_subsets_forward <- regsubsets(charges ~ . -sex, data = insurance, nvmax = 8, method = "forward" )
plot(reg_subsets_forward, scale = "bic") #adjr2 = adjusted r-sq value, "bic"
summary(reg_subsets_forward)
reg_subsets_backward <- regsubsets(charges ~ . -sex, data = insurance,nvmax = 8, method = "backward")
plot(reg_subsets_backward, scale = "adjr2")
reg_subsets_exhaustive<-regsubsets(charges ~ . -sex, data = insurance,nvmax = 8, method = "exhaustive")
plot(reg_subsets_exhaustive, scale = "adjr2")
model_with_region <- lm(charges ~ age, bmi, children, smoker, region, data = insurance)
n_data <- nrow(clean_avocado)
n_data
n_data <- nrow(clean_avocado) #18249 rows
test_index <- sample(1:n_data, size = n_data * 0.2)
train_set <- slice(clean_avocado, -test_index)
test_set <- slice(clean_avocado, test_index)
model_4_train <- lm(average_price ~ type:region +
year:month , data = train_set)
model_4_predict
model_4_train <- lm(average_price ~ type:region +
year:month , data = train_set)
model_4_predict <- predict(model_4_train, newdata = test_set)
median(abs(model_4_predict - test_set$average_price))
model_5_train <- lm(average_price ~ type:region +
month, data = train_set)
model_5_predict <- predict(model_5_train, newdata = test_set)
median(abs(model_4_predict - test_set$average_price))
median(abs(model_5_predict - test_set$average_price))
summary(model_4)
library(caret)
model_1[["terms"]][[3]]
?trainControl
timeslice_model_4 <- trainControl(method = "timeslice",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month)
timeslice_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month)
timeslice_model_4 <- trainControl(method = "timeslice",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, trControl = timeslice_model_4, method = "lm")
timeslice_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, trControl = timeslice_model_4, method = "lm")
timeslice_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = timeslice_model_4, method = "lm")
model_4_fold$results
model_4_fold$pred
model_4_fold$resample
model_4_fold$resample$RMSE
model_4_fold$resample$Rsquared
mean(model_4_fold$resample$RMSE)
mean(model_4_fold$resample$Rsquared)
timeslice_model_4 <- trainControl(method = "timeslice",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = timeslice_model_4, method = "lm")
timeslice_model_4 <- trainControl(method = "adaptive_cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = timeslice_model_4, method = "lm")
timeslice_model_4 <- trainControl(method = "repeatedcv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = timeslice_model_4, method = "lm")
mean(model_4_fold$resample$RMSE)
mean(model_4_fold$resample$Rsquared)
timeslice_model_4 <- trainControl(method = "boot",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = timeslice_model_4, method = "lm")
mean(model_4_fold$resample$RMSE)
mean(model_4_fold$resample$Rsquared)
cv_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = timeslice_model_4, method = "lm")
mean(model_4_fold$resample$RMSE)
mean(model_4_fold$resample$Rsquared)
cv_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = cv_model_4, method = "lm")
cv_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = cv_model_4, method = "lm")
###########
cv_model_5 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_5_fold <- train(average_price ~ type:region +
month, data = clean_avocado, trControl = cv_model_5, method = "lm")
mean(model_4_fold$resample$RMSE)
mean(model_4_fold$resample$Rsquared)
#####
mean(model_5_fold$resample$RMSE)
mean(model_5_fold$resample$Rsquared)
model_6 <- lm(average_price ~ type +
year:month, data = clean_avocado)
summary(model_6)
model_compare <- model_compare %>%
add_row(model = "model_6",
Adj_R_sq = round(digits = 4, summary(model_6)$adj.r.squared),
AIC = round(digits = 4, AIC(model_6)),
BIC = round(digits = 4, BIC(model_6))
)
model_compare
install.packages("GMulti")
install.packages("glmulti")
library(glmu)
library(glmulti)
future_avocado_model <- glmulti(y = average_price,
xr = .,
data = clean_avocado)
future_avocado_model <- glmulti(y = average_price,
data = clean_avocado)
future_avocado_model <- glmulti(data = clean_avocado,
y = average_price
)
future_avocado_model <- glmulti(average_price, c(.), clean_avocado)
future_avocado_model <- glmulti(average_price, c(.), clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ ., c(.), clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ total_volume + x4046 + x4225 +
x4770 + total_bags + small_bags + large_bags +
x_large_bags + type + year + region +
month + day_of_month,
c(.), clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ total_volume + x4046 + x4225 + x4770 + total_bags + small_bags + large_bags + x_large_bags + type + year + region + month + day_of_month,c(.), clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ length + total_volume + x4046 + x4225 + x4770 + total_bags + small_bags + large_bags + x_large_bags + type + year + region + month + day_of_month,c(.), clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ length + total_volume + x4046 + x4225 + x4770 + total_bags + small_bags + large_bags + x_large_bags + type + year + region + month + day_of_month,c(.), clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ length + total_volume + x4046 + x4225 + x4770 + total_bags + small_bags + large_bags + x_large_bags + type + year + region + month + day_of_month, data = clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~ total_volume + x4046 + x4225 + x4770 + total_bags + small_bags + large_bags + x_large_bags + type + year + region + month + day_of_month, data = clean_avocado, method = "h")
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "h", level = 1)
?glmulti
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "g", level = 1, plotty = FALSE)
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "d", level = 1, plotty = FALSE)
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "I", level = 1, plotty = FALSE)
library(tidyverse)
avocado <- read_csv("data/avocado.csv")
glimpse(avocado)
library(lubridate)
library(janitor)
clean_avocado <- avocado  %>%
mutate(month = as.factor(month(Date)),
day_of_month = as.factor(mday(Date)),
year = as.factor(year)) %>%
clean_names() %>%
select(-c(x1, date))
glimpse(clean_avocado)
#check for NA values
summary(clean_avocado)
alias(lm(average_price ~ . , data = clean_avocado))
test_1_model <- lm(average_price ~ . , data = clean_avocado)
summary(test_1_model)
library(broom)
0.239/mean(clean_avocado$average_price)*100
glance(test_1_model)
par(mfrow = c(2,2))
plot(test_1_model)
#I can have an all model comparisons in a single tibble.
#I can use add_row to add data.
model_compare <- tibble(model = "test_1_model",
Adj_R_sq = round(digits = 4,summary(test_1_model)$adj.r.squared),
AIC = round(digits = 4, AIC(test_1_model)),
BIC = round(digits = 4, BIC(test_1_model))
)
model_compare
model_1 <- lm(average_price ~ type +
year + month + day_of_month + region, data = clean_avocado)
summary(model_1)
model_compare <- model_compare %>%
add_row(model = "model_1",
Adj_R_sq = round(digits = 4, summary(model_1)$adj.r.squared),
AIC = round(digits = 4, AIC(model_1)),
BIC = round(digits = 4, BIC(model_1))
)
model_compare
par(mfrow = c(2,2))
plot(model_1)
model_2 <- lm(average_price ~ type +
year:month:day_of_month + region, data = clean_avocado)
model_compare <- model_compare %>%
add_row(model = "model_2",
Adj_R_sq = round(digits = 4, summary(model_2)$adj.r.squared),
AIC = round(digits = 4, AIC(model_2)),
BIC = round(digits = 4, BIC(model_2))
)
model_compare
par(mfrow = c(2,2))
plot(model_2)
model_3 <- lm(average_price ~ type +
year:month + region, data = clean_avocado)
summary(model_3)
model_compare <- model_compare %>%
add_row(model = "model_3",
Adj_R_sq = round(digits = 4, summary(model_3)$adj.r.squared),
AIC = round(digits = 4, AIC(model_3)),
BIC = round(digits = 4, BIC(model_3))
)
model_compare
par(mfrow = c(2,2))
plot(model_3)
model_4 <- lm(average_price ~ type:region +
year:month, data = clean_avocado)
summary(model_4)
model_compare <- model_compare %>%
add_row(model = "model_4",
Adj_R_sq = round(digits = 4, summary(model_4)$adj.r.squared),
AIC = round(digits = 4, AIC(model_4)),
BIC = round(digits = 4, BIC(model_4))
)
model_compare
par(mfrow = c(2,2))
plot(model_4)
model_5 <- lm(average_price ~ type:region +
month, data = clean_avocado)
summary(model_5)
model_compare <- model_compare %>%
add_row(model = "model_5",
Adj_R_sq = round(digits = 4, summary(model_5)$adj.r.squared),
AIC = round(digits = 4, AIC(model_5)),
BIC = round(digits = 4, BIC(model_5))
)
model_compare
par(mfrow = c(2,2))
plot(model_5)
model_6 <- lm(average_price ~ type +
year:month, data = clean_avocado)
summary(model_6)
model_compare <- model_compare %>%
add_row(model = "model_6",
Adj_R_sq = round(digits = 4, summary(model_6)$adj.r.squared),
AIC = round(digits = 4, AIC(model_6)),
BIC = round(digits = 4, BIC(model_6))
)
model_compare
n_data <- nrow(clean_avocado) #18249 rows
test_index <- sample(1:n_data, size = n_data * 0.2)
train_set <- slice(clean_avocado, -test_index)
test_set <- slice(clean_avocado, test_index)
model_4_train <- lm(average_price ~ type:region +
year:month , data = train_set)
model_4_predict <- predict(model_4_train, newdata = test_set)
model_5_train <- lm(average_price ~ type:region +
month, data = train_set)
model_5_predict <- predict(model_5_train, newdata = test_set)
median(abs(model_4_predict - test_set$average_price))
median(abs(model_5_predict - test_set$average_price))
library(caret)
cv_model_4 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_4_fold <- train(average_price ~ type:region +
year:month, data = clean_avocado,
trControl = cv_model_4, method = "lm")
###########
cv_model_5 <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
model_5_fold <- train(average_price ~ type:region +
month, data = clean_avocado, trControl = cv_model_5, method = "lm")
mean(model_4_fold$resample$RMSE)
mean(model_4_fold$resample$Rsquared)
#####
mean(model_5_fold$resample$RMSE)
mean(model_5_fold$resample$Rsquared)
library(glmulti)
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "I", level = 1, plotty = FALSE)
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "g", level = 1, plotty = FALSE)
future_avocado_model <- glmulti(average_price ~
total_volume + x4046 +
x4225 + x4770 + total_bags +
small_bags + large_bags +
x_large_bags + type +
year + region + month +
day_of_month, data = clean_avocado,
method = "g", level = 1)
