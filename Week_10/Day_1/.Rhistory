#import libraries
library(tidyverse)
library(janitor)
library(modelr)
library(broom)
library(ggfortify)
project <- read_csv("data/project_management.csv")
View(project)
library(tidyverse)
library(janitor)
library(modelr)
library(broom)
library(ggfortify)
mtcars %>%
select(wt, mpg) %>%
glimpse()
mtcars %>%
ggplot(aes(x = wt, y = mpg)) +
geom_point()
noisy_bivariate <- function(noise = 1, gradient = 1){
x <- runif(n = 200, min = 0, max = 10)
y <- gradient * x + 10
y_scatter <- noise * 4 * rnorm(n = 200)
y <- y + y_scatter
data = tibble(x, y)
r <- round(cor(x, y), 4)
title <- paste(
"noise = ", noise,
", gradient = ", gradient,
", r = ", r
)
data %>%
ggplot(aes(x = x, y = y)) +
geom_point() +
xlim(0, 10) +
ylim(min(c(min(y), 0)), max(c(max(y), 10))) +
ggtitle(title)
}
noisy_bivariate(noise = 0.3, gradient = 1)
#summary(state.x77)
tibble_states <- clean_names(as_tibble(state.x77))
#View(tibble_states)
correlation_value <- paste("correlation value = ", round(digits = 2, cor(tibble_states$population, tibble_states$income)))
tibble_states %>%
ggplot(aes(x = population, y = income)) +
geom_point()+
ggtitle(correlation_value)
line <- function(x, a, b){
# a is gradient, b is intercept
return(a * x + b)
}
data <- tibble(
x = seq(-5, 5, 0.1),
y = line(x, a = -1, b = -1),
y2 = line(x, a = 1, b = -2),
y3 = line(x, a = 3, b = 0.5)
)
data %>%
ggplot(aes(x, y))+
geom_line(color = "red") +
geom_line(aes(x, y2), color = "green") +
geom_line(aes(x, y3), color = "blue") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed()
noisy_line <- read_csv("data/noisy_line.csv")
noisy_line_plot <- noisy_line %>%
ggplot(aes(x, y)) +
geom_point()
noisy_line_plot
centroid <- noisy_line %>%
summarise(
x = mean(x),
y = mean(y)
)
centroid
noisy_line_plot <- noisy_line_plot +
geom_point(aes(x = centroid$x, y = centroid$y), col = "red", size = 5)
noisy_line_plot
get_intercept <- function(slope, centroid_x, centroid_y){
#when fitting the line we need to choose our slope
return(centroid_y - slope * centroid_x)
}
#done by vsual estimate - not ideal, best to use geom_smooth
slope = 2.25
noisy_line_plot+
geom_abline(slope = slope, intercept = get_intercept(slope, centroid$x, centroid$y))
noisy_line_plot +
geom_smooth(method = "lm", se = FALSE)
height <- c(176, 164, 181, 168, 195, 185, 166, 180, 188, 174)
weight <- c(82, 65, 85, 76, 90, 92, 68, 83, 94, 74 )
sample <- tibble(
weight,
height
)
sample %>%
ggplot(aes(x = weight, y = height)) +
geom_point()
line <- function(x, b0, b1){
return(b0 + b1 * x)
}
sample <- sample %>%
mutate(fit_height = line(x = weight, b0 = 95, b1 = 1))
plot <- sample %>%
ggplot(aes(x = weight, y = height)) +
geom_point() +
geom_point(aes(y = fit_height), shape = 1) +
geom_abline(slope = 1, intercept = 95, col = "red") +
geom_segment(aes(xend = weight, yend = fit_height), alpha = 0.5)
plot
sample <- sample %>%
mutate(residual = height - fit_height)
sample %>%
summarise(
sum_sq_residuals = sum(residual^2)
)
model = lm(formula = height ~ weight, data = sample)
model
fitted(model) #for existing data points
#base R method
predict_at <- data.frame(weight = c(78))
predict(model, newdata = predict_at)
sample <- sample %>%
select(weight, height)
sample
#tidy method
sample <- sample %>%
add_predictions(model) %>%
add_residuals(model)
sample
sample %>%
ggplot(aes(x = weight))+
geom_point(aes(y = height))+
geom_line(aes(y = pred),color = "red")
#predicting data not in original data
weights_predict <- tibble(weight = 50:120)
weights_predict %>%
add_predictions(model)
model <- lm(height ~ weight, data = sample)
model
summary(model)
tidy_output <- clean_names(tidy(model))
glance_output <- clean_names(glance(model)) # model performance data
#r squared value
glance_output$r_squared
r <- cor(sample$height, sample$weight)
r^2
tidy_output
autoplot(model)
distribution_1 <- read_csv("data/distribution_1.csv")
distribution_2 <- read_csv("data/distribution_2.csv")
dist_1_model <- lm(y ~ x, data = distribution_1)
autoplot(dist_1_model)
dist_2_model <- lm(y ~ x, data = distribution_2)
autoplot(dist_2_model)
distribution_1 <- distribution_1 %>%
add_predictions(dist_1_model)
distribution_2 <- distribution_2 %>%
add_predictions(dist_2_model)
distribution_1 %>%
ggplot(aes(x = x))+
geom_point(aes(y = y))+
geom_line(aes(y = pred), color = "red")+
ggtitle("distribution_1")
distribution_2 %>%
ggplot(aes(x = x))+
geom_point(aes(y = y))+
geom_line(aes(y = pred), color = "red")
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_line()
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project)))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project)), repel = TRUE)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project), repel = TRUE))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project), jitter = 2))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project)),jitter = 2)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(jitter = TRUE, label = 1:nrow(project)))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(position = "jitter", label = 1:nrow(project)))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project)), position = "jitter")
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point()+
geom_text(aes(label = 1:nrow(project)))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))+
geom_smooth(method = "lm", se = FALSE)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))
project %>%
autoplot(which = 4)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))+
geom_smooth(method = "lm", se = FALSE)
proj_model = lm(esimated_lenngth ~ actual_length, data = project)
proj_model = lm(esimated_length ~ actual_length, data = project)
proj_model = lm(esimated_length ~ actual_length, data = project)
#load and preview data
project <- read_csv("data/project_management.csv")
View(project)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))+
geom_smooth(method = "lm", se = FALSE)
proj_model = lm(esimated_length ~ actual_length, data = project)
proj_model = lm(estimated_length ~ actual_length, data = project)
proj_model
autoplot(proj_model, which = 4)
proj_model = lm(actual_length ~ estimated_length, data = project)
proj_model
autoplot(proj_model, which = 4)
proj_model = lm(estimated_length ~ actual_length, data = project)
proj_model
autoplot(proj_model, which = 4)
proj_model = lm(estimated_length ~ actual_length, data = project)
proj_model
autoplot(proj_model,)
View(project)
project_outlier <- project %>%
filter(actual_length < 30)
project_outlier_model
project_outlier <- project %>%
filter(actual_length < 30)
project_outlier <- project %>%
filter(actual_length < 30)
project_outlier_model <- lm(estimated_length ~ actual_length, data = project_outlier)
project_outlier_model
project_outlier <- project %>%
filter(actual_length < 30)
project_outlier_model <- lm(actual_length~estimated_length, data = project_outlier)
project_outlier_model
proj_model = lm(actual_length~estimated_length, data = project)
proj_model
autoplot(proj_model)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = actual_length, y = estimated_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))+
geom_smooth(method = "lm", se = FALSE)
autoplot(project_outlier_model)
#plot explanatory variable x = estimated_length, outcome variable y = actual_length
project %>%
ggplot(aes(x = estimated_length, y = actual_length))+
geom_point(size = 1)+
geom_text(aes(label = 1:nrow(project)))+
geom_smooth(method = "lm", se = FALSE)
proj_model = lm(estimated_length~actual_length, data = project)
proj_model
autoplot(proj_model)
proj_model = lm(estimated_length ~ actual_length, data = project)
proj_model
autoplot(proj_model)
project_outlier <- project %>%
filter(actual_length < 30)
project_outlier_model <- lm(estimated_length~actual_length, data = project_outlier)
autoplot(project_outlier_model)
options(scipen = 999)
g_proj_model <- clean_names(glaance(proj_model))
options(scipen = 999)
g_proj_model <- clean_names(glance(proj_model))
t_proj_model <- clean_names(tidy(proj_model))
g_proj_model
options(scipen = 999)
g_proj_model <- clean_names(glance(proj_model))
t_proj_model <- clean_names(tidy(proj_model))
g_proj_model
t_proj_model
project_outlier <- project %>%
filter(actual_length < 30)
project_outlier_model <- lm(estimated_length~actual_length, data = project_outlier)
autoplot(project_outlier_model)
g_proj_outlier_model <- clean_names(glance(project_outlier))
t_proj_outlier_model <- clean_names(tidy(proj_model))
g_proj_outlier_model
t_proj_outlier_model
g_proj_outlier_model <- clean_names(glance(project_outlier))
g_proj_outlier_model
g_proj_outlier_model <- clean_names(glance(project_outlier))
g_proj_outlier_model <- clean_names(glance(project_outlier))
g_proj_outlier_model
t_proj_outlier_model
g_proj_outlier_model <- clean_names(glance(project_outlier))
t_proj_outlier_model <- clean_names(tidy(project_outlier))
g_proj_outlier_model
g_proj_outlier_model <- clean_names(glance(project_outlier_model))
t_proj_outlier_model <- clean_names(tidy(project_outlier_model))
g_proj_outlier_model
t_proj_outlier_model
