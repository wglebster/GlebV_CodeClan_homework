point_estimate
houses_before_1920_200 <- clean_ames %>%
mutate(before_1920 = as.numeric(year_built < 1920)) %>%
specify(response = before_1920) %>%
generate(reps = 200, type = "bootstrap") %>%
calculate(stat = "mean") %>%
get_ci(level = 0.95, type = "percentile")
houses_before_1920_50000 <- clean_ames %>%
mutate(before_1920 = as.numeric(year_built < 1920)) %>%
specify(response = before_1920) %>%
generate(reps = 50000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
get_ci(level = 0.95, type = "percentile")
houses_before_1920_200
library(infer)
library(janitor)
library(tidyverse)
books <- read_csv("1_one_sample_tests_mean/data/books.csv")
glimpse(books)
books_tidy <- books %>%
clean_names() %>%
filter(!is.na(average_rating)) %>%
rename(num_pages = number_num_pages)
glimpse(books_tidy)
books_tidy %>%
ggplot(aes(x = average_rating)) +
geom_histogram(col = "white", bins = 30)
books_tidy %>%
ggplot(aes(x = average_rating)) +
geom_boxplot()
observed_stat <- books_tidy %>%
summarise(mean_rating = mean(average_rating))
observed_stat
null_distribution <- books_tidy %>%
specify(response = average_rating) %>%
hypothesise(null = "point", mu = 3.93) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat$mean_rating, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$mean_rating, direction = "both")
p_value
spa_books <- books_tidy %>%
filter(language_code == "spa")
spa_books
spa_books_obs_stat <- spa_books %>%
summarise(mean_rating = mean(average_rating))
spa_books_obs_stat
spa_books_null_distribution <- spa_books %>%
specify(response = average_rating) %>%
hypothesise(null = "point", mu = 3.96) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
spa_books_null_distribution
spa_books_null_distribution %>%
visualise() +
shade_p_value(obs_stat = spa_books_obs_stat$mean_rating, direction = "left")
p_value <- spa_books_null_distribution %>%
get_p_value(obs_stat = spa_books_obs_stat$mean_rating, direction = "left")
p_value
books_tidy %>%
group_by(text_reviews_count) %>%
summarise(prop = n()/nrow(books_tidy)) %>%
filter(text_reviews_count == 0)
books_tidy_prop <- books_tidy %>%
mutate(text_reviews_flag = ifelse(text_reviews_count > 0, "text_review", "no_text_review"))
head(books_tidy_prop)
null_distribution <- books_tidy_prop %>%
specify(response = text_reviews_flag, success = "no_text_review") %>%
hypothesise(null = "point", p = 0.07) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
head(null_distribution)
null_distribution %>%
visualise()
observed_stat <- books_tidy_prop %>%
specify(response = text_reviews_flag, success = "no_text_review") %>%
calculate(stat = "prop")
observed_stat
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "both")
null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
#unique(books_tidy$language_code)
books_tidy %>%
group_by(language_code) %>%
summarise(prop = n()/nrow(books_tidy)) %>%
filter(language_code == "fre")
books_tidy_prop_fre <- books_tidy %>%
mutate(language_flag = ifelse(language_code == "fre", "fre_language", "other_language"))
head(books_tidy_prop_fre)
fre_null_distribution <- books_tidy_prop_fre %>%
specify(response = language_flag, success = "fre_language") %>%
hypothesise(null = "point", p = 0.015) %>%
generate(reps = 2000, type = "simulate") %>%
calculate(stat = "prop")
head(fre_null_distribution)
fre_null_distribution %>%
visualise()
fre_observed_stat <- books_tidy_prop_fre %>%
specify(response = language_flag, success = "fre_language") %>%
calculate(stat = "prop")
fre_observed_stat
fre_null_distribution %>%
visualise() +
shade_p_value(obs_stat = fre_observed_stat, direction = "less")
fre_null_distribution %>%
get_p_value(obs_stat = fre_observed_stat, direction = "less")
nice <- read_csv("3_two_sample_tests/data/nice.csv")
algarve <- read_csv("3_two_sample_tests/data/algarve.csv")
apart_prices <- bind_rows(nice, algarve, .id = "location") %>%
mutate(location = ifelse(location == "1", "nice", "algarve")) %>%
select(-X1)
apart_prices
apart_prices %>%
ggplot(aes(x = location, y = price)) +
geom_boxplot()
null_distribution <- apart_prices %>%
specify(response = price, explanatory = location) %>% #(price ~ location)
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("algarve", "nice"))
null_distribution
#observed stat
observed_stat <- apart_prices %>%
specify(price ~ location) %>%
calculate(stat = "diff in means", order = c("algarve", "nice"))
observed_stat
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "right")
options(scipen = 999)
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "right")
p_value
books <- read_csv("3_two_sample_tests/data/ucla_textbooks_f18.csv")
glimpse(books)
books_diff <- books %>%
mutate(diff_new = bookstore_new - amazon_new) %>%
filter(!is.na(diff_new))
books_diff %>%
ggplot(aes(x = diff_new)) +
geom_histogram(col = "white")
null_distribution <- books_diff %>%
specify(response = diff_new) %>%
hypothesise(null = "point", mu = 0) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
observed_stat <- books_diff %>%
specify(response = diff_new) %>%
calculate(stat = "mean")
observed_stat
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
p_value
poll <- read_csv("3_two_sample_tests/data/election_data.csv")
glimpse(poll)
ggplot(poll, aes(x = vote, fill = gender)) +
geom_bar(position = "fill") +
coord_flip()
poll_observed_stat <- poll %>%
specify(gender ~ vote, success = "woman") %>%
calculate(stat = "diff in props", order = c("obama", "romney"))
poll_observed_stat
poll_null_distribution <- poll %>%
specify(gender ~ vote, success = "woman") %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in props", order = c("obama", "romney"))
library(tidyverse)
data(msleep)
msleep <- msleep
View(msleep)
names(msleep)
dim(msleep)
#calculate sample average sleep per night
observed_stat <- msleep %>%
summarise(avg_total_sleep = mean(sleep_total))
observed_stat
#visualise data on histogram and boxplot
ggplot(msleep) +
aes(x = sleep_total) +
geom_histogram(col = "white", bins = 30)
#visualise data on histogram and boxplot
ggplot(msleep) +
aes(x = sleep_total) +
geom_histogram(col = "white", bins = 30)
ggplot(msleep) +
aes(x = sleep_total) +
geom_boxplot()
#calculate sample average sleep per night
observed_stat <- msleep %>%
summarise(avg_total_sleep = mean(sleep_total))
observed_stat
# calculate null hypothesis distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
#visualize null distribution
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
# calculate p value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
p_value()
# calculate p value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
p_value
# calculate null hypothesis distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 10.43) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
#visualize null distribution
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
# calculate p value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
p_value
# calculate null hypothesis distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
#visualize null distribution
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
# calculate p value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$avg_total_sleep, direction = "both")
p_value
poll <- read_csv("3_two_sample_tests/data/election_data.csv")
glimpse(poll)
ggplot(poll, aes(x = vote, fill = gender)) +
geom_bar(position = "fill") +
coord_flip()
poll_observed_stat <- poll %>%
specify(gender ~ vote, success = "woman") %>%
calculate(stat = "diff in props", order = c("obama", "romney"))
poll_observed_stat
poll_null_distribution <- poll %>%
specify(gender ~ vote, success = "woman") %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in props", order = c("obama", "romney"))
poll_null_distribution
poll_null_distribution %>%
visualise() +
shade_p_value(obs_stat = poll_observed_stat, direction = "both")
p_value <- poll_null_distribution %>%
get_p_value(obs_stat = poll_observed_stat, direction = "both")
p_value
View(msleep)
?pivot_longer
vores_sleep <- msleep
View(msleep)
vores_sleep <- msleep %>%
filter(vores == "carni", vores == "omni")
vores_sleep <- msleep %>%
filter(vore == "carni", vore == "omni")
ggplot(vores_sleep, aes())
vores_sleep
vores_sleep <- msleep %>%
filter(vore == "carni", vore == "omni")
vores_sleep
vores_sleep <- msleep %>%
filter(vore == "carni" & vore == "omni")
vores_sleep
ggplot(vores_sleep, aes())
vores_sleep <- msleep %>%
filter(vore == "carni" | vore == "omni")
vores_sleep
ggplot(vores_sleep, aes())
View(vores_sleep)
vores_sleep <- msleep %>%
filter(vore == "carni" | vore == "omni")
View(vores_sleep)
ggplot(vores_sleep, aes(x = sleep_total, fill = vore)) +
geom_bar(position = "fill")
vores_sleep <- msleep %>%
filter(vore == "carni" | vore == "omni")
#View(vores_sleep)
ggplot(vores_sleep, aes(x = sleep_total, fill = vore)) +
geom_bar(position = "fill") +
coord_flip()
vores_sleep <- msleep %>%
filter(vore == "carni" | vore == "omni") %>%
group_by(vore) %>%
summarise(sleep_total)
vores_sleep
vores_sleep %>%
ggplot(aes(x = vore, y = sleep_total)) +
geom_boxplot()
vores_sleep <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
group_by(vore) %>%
summarise(sleep_total)
vores_sleep
vores_sleep %>%
ggplot(aes(x = vore, y = sleep_total)) +
geom_boxplot()
sleep_null_distribution <- vores_sleep %>%
specify(vore ~ sleep_total) %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
sleep_null_distribution <- vores_sleep %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = ïndependence) %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
sleep_null_distribution <- vores_sleep %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
sleep_null_distribution <- vores_sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
head(sleep_null_distribution)
sleep_observer_stat <- vores_sleep %>%
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
sleep_observer_stat
sleep_null_distribution %>%
visualise() +
shade_p_value(obs_stat = sleep_observer_stat, direction = "right")
sleep_p_value <- sleep_null_distribution %>%
get_p_value(obs_stat = sleep_observer_stat, direction = "right")
sleep_p_value <- sleep_null_distribution %>%
get_p_value(obs_stat = sleep_observer_stat, direction = "right")
sleep_p_value
View(msleep)
domesticated_animals <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", TRUE, FALSE))
domesticated_animals
ggplot(domesticated_animals, aes(x = is_domesticated)) +
geom_bar(position = "fill")
domesticated_animals <- msleep %>%
mutate(is_domesticated = ifelse(conservation != "domesticated", FALSE, TRUE))
domesticated_animals
domesticated_animals <- msleep %>%
mutate(is_domesticated = ifelse(is.na(conservation) & conservation != "domesticated", FALSE, TRUE))
domesticated_animals
domesticated_animals <- msleep %>%
mutate(is_domesticated = ifelse(!is.na(conservation) & conservation != "domesticated", FALSE, TRUE))
domesticated_animals
domesticated_animals <- msleep %>%
mutate(is_domesticated = ifelse(!is.na(conservation) & conservation != "domesticated", FALSE, TRUE))
domesticated_animals
ggplot(domesticated_animals, aes(x = is_domesticated)) +
geom_bar(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated)) +
geom_bar(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "dodge")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated), position = "dodge") +
geom_bar()
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "dodge")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated, y = "count" fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticates) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticates) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticates) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticates) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticates) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticates) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticated) fill = is_domesticated)) +
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticated))) +
geom_col(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated, y = count(is_domesticated))) +
geom_col(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = iis_domesticated))) +
ggplot(domesticated_animals, aes(x = is_domesticated, fill = iis_domesticated)) +
geom_bar(position = "dodge")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "dodge")
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = TRUE) %>%
calculate(stat = "props")
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = TRUE) %>%
calculate(stat = "prop")
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "prop")
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "prop")
dom_a_obsserved_stat
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "diff in props", order = c("TRUE", "FALSE"))
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "diff in props")
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "props")
dom_a_obsserved_stat <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "prop")
dom_a_obsserved_stat
#0.4698795
dom_a_obsserved_stat_null_distribution <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in props")
dom_a_obsserved_stat_null_distribution <- domesticated_animals %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "props")
?hypothesise
vignette("infer")
0.05 > 0.07
0.05 < 0.07
0.006 < 0.01
library(tidyverse)
library(janitor)
heart_data <- read_csv("data/heart.csv")
heart_data %>%
ggplot(aes(x = thalach)) +
geom_histogram()
heart_data %>%
ggplot(aes(x = thalach)) +
geom_boxplot()
heart_data %>%
ggplot(aes(x = exang)) +
geom_bar()
heart_data_param_summary <- heart_data %>%
summarise(mean_thalach = mean(thalach),
prop_exang = mean(exang == "1"))
heart_data_param_summary
library(infer)
heart_data_50_sample <- heart_data %>%
rep_sample_n(size = 50, reps = 1) %>%
ungroup() %>%
summarise(mean_thalach = mean(thalach),
prop_exang = mean(exang == "1")
)
heart_data_50_sample
# order of subtraction is not important for calculation of sampling error.
abs(heart_data_param_summary - heart_data_50_sample)
rep_sample_50 <- heart_data %>%
rep_sample_n(size = 50, reps = 5000)
rep_sample_50
rep_sample_50_means <- rep_sample_50 %>%
summarise(mean_thalach = mean(thalach),
prop_exang = mean(exang == "1")
)
ggplot(rep_sample_50_means) +
aes(x = mean_thalach) +
geom_histogram(col = "white") +
labs(x = "mean thalach")
#rep_sample_50_means
ggplot(rep_sample_50_means) +
aes(x = prop_exang) +
geom_histogram(col = "white") +
labs(x = "mean thalach")
domesticated_animals <- msleep %>%
mutate(is_domesticated = ifelse(conservation != "domesticated", FALSE, TRUE))
domesticated_animals
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "dodge")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "fill")
ggplot(domesticated_animals, aes(x = is_domesticated, fill = is_domesticated)) +
geom_bar(position = "dodge")
sleep_null_distribution <- vores_sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
head(sleep_null_distribution)
sleep_observer_stat <- vores_sleep %>%
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
sleep_observer_stat
sleep_null_distribution %>%
visualise() +
shade_p_value(obs_stat = sleep_observer_stat, direction = "right")
sleep_p_value <- sleep_null_distribution %>%
get_p_value(obs_stat = sleep_observer_stat, direction = "right")
sleep_p_value
