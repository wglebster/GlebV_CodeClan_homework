return(rank_two)
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
#print(rank_two)
}
}
}
return(rank_two)
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
#print(rank_two)
}
}
}
}
return(rank_two)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
rank_two
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
rank_two
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
print(rank_two)
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
return(rank_two)
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
print(rank_two)
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
paste(rank_two)
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
paste(rank_two)
}
}
}
}
chars_in_list(my_list)
chars_in_list <- function(list_arg) {
for (rank_one in list_arg){
for(rank_two in rank_one){
if(is.character(rank_two)){
print(rank_two)
}
}
}
}
chars_in_list(my_list)
iter_val<- 1
stop_val <- 12
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val)
iter_val <- iter_val + 1
}
matrix_vec
iter_val<- 1
stop_val <- 12
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec
12 * 12
iter_val<- 1
stop_val <- 144
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec
iter_val<- 1
stop_val <- 144
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12)
iter_val<- 0
stop_val <- 144
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12)
iter_val<- 0
stop_val <- 144
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12)
matrix_vec
iter_val<- 0
stop_val <- 144
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12)
matrix_vec
iter_val<- 1
stop_val <- 145
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12)
matrix_vec
iter_val<- 1
stop_val <- 145
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = TRUE)
matrix_vec
iter_val<- 1
stop_val <- 145
matrix_vec <- c()
while(iter_val < stop_val) {
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE)
matrix_vec
iter_val<- 1 #sequence start
stop_val <- 144 #sequence stop
matrix_vec <- c() #each iteration  of the loop adds one number to the vector
while(iter_val <= stop_val) { #
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1
}
matrix_vec <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE)
matrix_vec
iter_val<- 1 #sequence start
stop_val <- 144 #sequence stop
matrix_vec <- c() #each iteration  of the loop adds one number to the vector
while(iter_val <= stop_val) { #sequence stops after 144 iterations
matrix_vec <- c(matrix_vec, iter_val * 12) # each number is multiplied by 12 as it is appended to the vector
iter_val <- iter_val + 1 #increases iterable value by one
}
matrix_final <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE) # convert vector to matrix of 12rows and 12 columns
matrix_final #
iter_val<- 1 #sequence start
stop_val <- 144 #sequence stop
matrix_vec <- c() #each iteration  of the loop adds one number to the vector
while(iter_val <= stop_val) { #sequence stops after 144 iterations
# each number is multiplied by 12 as it is appended to the vector
matrix_vec <- c(matrix_vec, iter_val * 12)
iter_val <- iter_val + 1 #increases iterable value by one
}
matrix_final <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE) # convert vector to matrix of 12rows and 12 columns
matrix_final #display matrix
iter_val<- 1 #sequence start
stop_val <- 144 #sequence stop
matrix_vec <- c() #each iteration  of the loop adds one number to the vector
while(iter_val <= stop_val) { #sequence stops after 144 iterations
# each number is multiplied by 12 as it is appended to the vector
matrix_vec <- c(matrix_vec, iter_val * 12)
#increases iterable value by one
iter_val <- iter_val + 1
}
# convert vector to matrix of 12rows and 12 columns
matrix_final <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE)
#display matrix
matrix_final
?Random
iter_val<- 1 #sequence start
stop_val <- 144 #sequence stop
matrix_vec <- c() #each iteration  of the loop adds one number to the vector
while(iter_val <= stop_val) { #sequence stops after 144 iterations
#each number is multiplied by 12 as it is appended to the vector
matrix_vec <- c(matrix_vec, iter_val * 12)
#increases iterable value by one
iter_val <- iter_val + 1
}
#convert vector to matrix of 12rows and 12 columns
matrix_final <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE)
#display matrix
matrix_final
?Random.user
random_num <- sample(1:10, 3)
random_num
random_num <- sample(1:10, 10)
random_num
random_num <- list(sample(1:10, 10))
random_num
random_num <- list(1:10)
random_num
list_init <- list(1:10)
list_final
list_init <- list(1:10)
list_final <- list()
while(list_final){
}
hist_length <- (1:10)
hist_length <- (1:10)
mult_by_15_add_4 <- function(x = NULL){
if(is.null(x)|!is.numeric(x)){
return("Please enter numeric value")
} else {
by_15 <- x * 15
add_4 <- by_15 + 4
}
return(add_4)
}
mult_by_15_add_4(1)
mult_by_15_add_4(2)
mult_by_15_add_4(3)
mult_by_15_add_4()
mult_by_15_add_4("two")
#correct basic version
is_bird <- function(x = "no_value"){
if(x == "no_value"){
return("Plese enter some text")
} else {
dplyr::case_when(
x == "goose" ~ paste("bird"),
x == "duck" ~ paste("bird"),
x == "pigeon" ~ paste("bird"),
TRUE ~ paste("not bird")
)
}
}
is_bird()
is_bird("Pterodactyl")
is_bird("Sparrow, surely it's a bird, lets see...")
is_bird("goose")
is_bird("duck")
is_bird("pigeon")
#having an explicit return statement after case_when produces erroneous output.
is_bird <- function(x = "no_value"){
input <- c(x)
if(input == "no_value"){
return("Plese enter some text")
} else {
#needs an object assignment to case when, then return object:
# output <-
dplyr::case_when(
input == "goose" ~ paste("bird"),
input == "duck" ~ paste("bird"),
input == "pigeon" ~ paste("bird"),
TRUE ~ paste("not bird")
)
}
return(input) # change return argument to output
}
is_bird()
is_bird("Pterodactyl")
is_bird("Sparrow, surely it's a bird, lets see...")
is_bird("goose")
is_bird("duck")
is_bird("pigeon")
by_ten <- function(x){
if(is.null(x) | !is.numeric(x)){
error_msg <- c("Invalid input")
return(error_msg)
} else {
result <- x * 10
return(result)
}
}
by_ten(2)
by_ten(5.3)
by_ten("x")
by_ten(7)
sizes <- c(13, 15, 10, 8, 22)
new_vector <- ifelse(sizes > 10, "Big", sizes)
new_vector
fruit <- c("apple", "apple", "banana", "cherry", "cherry")
not_fruit <- dplyr::recode(fruit, "apple" = "alpaca",
"banana" = "bonobo",
"cherry" = "chipmunk")
not_fruit
wife_age <- c(29L, 30L, 36L, 31L, 22L)
husband_age <- c(28L, 35L, 32L, 31L, 29L)
comparison <- dplyr::case_when(
wife_age > husband_age ~ paste("Wife older"),
wife_age < husband_age ~ paste("Husband older"),
wife_age == husband_age ~ paste("Same age")
)
data.frame(wife_age, comparison, husband_age)
my_list <- list(
4,
"apple",
10.5,
c("is", "an", "apple"),
"apple",
c("i", "like", "apples"),
8
)
class(my_list[[2]][1])
my_list
for(char in my_list){
if (class(char) == "character") {
print(char)
}
}
to_fill <- c()
for (item in my_list) {
if(length(item) > 2){
to_fill <- c(to_fill, item)
}
}
print(to_fill)
class(to_fill)
iter_val<- 1 #sequence start
stop_val <- 144 #sequence stop
matrix_vec <- c() #each iteration  of the loop adds one number to the vector
while(iter_val <= stop_val) { #sequence stops after 144 iterations
#each number is multiplied by 12 as it is appended to the vector
matrix_vec <- c(matrix_vec, iter_val * 12)
#increases iterable value by one
iter_val <- iter_val + 1
}
#convert vector to matrix of 12rows and 12 columns
matrix_final <- matrix(matrix_vec, nrow = 12, ncol = 12, byrow = FALSE)
#display matrix
matrix_final
hist_length <- (1:10)
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix[1][2]
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix[1][]
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_matrix[1]
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_matrix[5]
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_matrix[1]
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_matrix[1]
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_matrix[1]
?cat
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
for(item in hist_matrix){
printing <- 0
cat("1")
while(printing < hist_matrix[item]){
cat("-")
printing + 1
}
}
hist_length <- (1:10)
random_vect <- sample(1:10, 10)
hist_matrix <- matrix(random_vect)
hist_matrix
hist_length <- (1:10)
random_vect <- sample(1:hhist_length, 10)
hist_length <- (1:10)
random_vect <- sample(1:hist_length, 10)
hist_length <- (1:10)
random_vect <- sample(1:length(hist_vect), 10)
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
cat("-", random_vect, "/n")
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
paste("-", random_vect, "/n")
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
paste("-", random_vect)
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
paste("-" * random_vect)
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
print("-")*random_vect
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem in random_vect) {
paste("-")*[elem]
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem in random_vect) {
paste("-") * [elem]
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem in random_vect) {
paste("-") * elem[]
}
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem in random_vect) {
paste("-") * elem
}
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem in random_vect) {
paste("-")
}
#print("-")*random_vect
#paste("-" * random_vect)
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem in random_vect) {
print("-")
}
#print("-")*random_vect
#paste("-" * random_vect)
hist_length <- (1:10)
random_vect <- sample(1:length(hist_length), 10)
random_vect
for (elem[i] in random_vect) {
?sequence
