#
# weather_data_y_m_d <- weather_data_y_m %>%
#   mutate(day = day(time_hour)) %>%
#   group_by(origin, year, month, day) %>%
#   summarise(mean_temp = mean(temp))
#
# weather_data_y_m_d
weather_data_y_m_agg %>%
gg_subseries(mean_temp)
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg <- weather_data_y_m %>%
group_by(origin) %>%
index_by(date = ~yday(.)) %>%
summarise( temp_mean = mean(temp, na.rm = TRUE))
weather_data_y_m_agg
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
filter(origin %in% c("EWR", "JFK", "LGA"))
gg_subseries(mean_temp)
weather_data_y_m_agg <- weather_data_y_m %>%
group_by(origin) %>%
index_by(date = ~yday(.)) %>%
summarise( temp_mean = mean(temp, na.rm = TRUE))
weather_data_y_m_agg
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
filter(origin %in% c("EWR", "JFK", "LGA")) %>%
gg_subseries(mean_temp)
weather_data_y_m_agg <- weather_data_y_m %>%
group_by(origin) %>%
index_by(date = ~yday(.)) %>%
summarise( temp_mean = mean(temp, na.rm = TRUE))
weather_data_y_m_agg
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
filter(origin %in% c("EWR", "JFK", "LGA")) %>%
gg_subseries(temp_mean)
weather_data_y_m_agg <- weather_data_y_m %>%
group_by(origin) %>%
index_by(date = ~yday(.)) %>%
summarise( temp_mean = mean(temp, na.rm = TRUE))
weather_data_y_m_agg
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
# weather_data_y_m_agg %>%
#   filter(origin %in% c("EWR", "JFK", "LGA")) %>%
#   gg_subseries(temp_mean)
weather_data_y_m_agg <- weather_data_y_m %>%
group_by(origin) %>%
index_by(day = ~yday(.)) %>%
summarise(temp_mean = mean(temp, na.rm = TRUE))
weather_data_y_m_agg
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
# weather_data_y_m_agg %>%
#   filter(origin %in% c("EWR", "JFK", "LGA")) %>%
#   gg_subseries(temp_mean)
ggplot(weather_data_y_m) +
aes(x = time_hour, y = temp, group = origin, colour = origin) +
geom_line()
weather_rolling <- weather_data %>%
mutate(temp_ma = slide_dbl(temp,
~ mean(., na.rm = TRUE),
.size = 2000)
)
ggplot(weather_rolling) +
geom_line(aes(x = time_hour, y = temp), colour = "grey") +
geom_line(aes(x = time_hour, y = temp_ma), colour = "black")
weather_rolling <- weather_data %>%
mutate(temp_ma = slide_dbl(temp,
~ mean(., na.rm = TRUE),
.size = 740)
)
ggplot(weather_rolling) +
geom_line(aes(x = time_hour, y = temp), colour = "grey") +
geom_line(aes(x = time_hour, y = temp_ma), colour = "black")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_wrap()
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_wrap(facets = origin)
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_wrap()
weather_data_y_m_agg <- weather_data_y_m %>%
group_by(origin) %>%
index_by(day = ~yday(.)) %>%
summarise(temp_mean = mean(temp, na.rm = TRUE))
weather_data_y_m_agg
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_wrap(facets = origin, dir = "v")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_wrap(facets = origin, dir = "v", scales = "fixed")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
facet_wrap(facets = origin, dir = "v") +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
facet_wrap(facets = origin) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
facet_grid() +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
facet_grid(rows = origin) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature")
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_grid(origin)
weather_data_y_m_agg %>%
autoplot(temp_mean) +
labs(title = "Daily mean temperature data in three NYC airports",
x = "day",
y = "temperature") +
facet_grid(origin ~ .)
library(tidyverse)
library(tsibble)
library(tsibbledata)
library(fable)
aus_production
beer_data %>%
autoplot()
beer_data <- aus_production %>%
select(Quarter, Beer)
beer_data %>%
autoplot()
mode_fit <- beer_data %>%
model(
snaive_model = SNAIVE(Beer),
mean_model = MEAN(Beer),
arima_model = ARIMA(Beer)
)
model_fit
mode_fit <- beer_data %>%
model(
snaive_model = SNAIVE(Beer),
mean_model = MEAN(Beer),
arima_model = ARIMA(Beer)
)
model_fit
model_fit <- beer_data %>%
model(
snaive_model = SNAIVE(Beer),
mean_model = MEAN(Beer),
arima_model = ARIMA(Beer)
)
model_fit
beer_data <- aus_production %>%
select(Quarter, Beer)
beer_data %>%
autoplot()
model_fit <- beer_data %>%
model(
snaive_model = SNAIVE(Beer),
mean_model = MEAN(Beer),
arima_model = ARIMA(Beer)
)
model_fit
our_forecast <- model_fit %>%
forecast(h = 12)
our_forecast
our_forecast %>%
autoplot(beer_data)
our_forecast %>%
autoplot(beer_data, level = NULL)
our_forecast %>%
autoplot(beer_data)
our_forecast <- model_fit %>%
forecast(h = 40)
our_forecast %>%
filter(.model = "snaive_model")
our_forecast_40_snaive <- model_fit %>%
forecast(h = 40)
our_forecast_40_snaive %>%
filter(.model = "snaive_model")
our_forecast_40_snaive <- model_fit %>%
forecast(h = 40)
our_forecast_40_snaive %>%
filter(.model = "snaive_model") %>%
autoplot(beer_data)
our_forecast_40_snaive <- model_fit %>%
forecast(h = 40)
our_forecast_40_snaive %>%
filter(.model == "snaive_model") %>%
autoplot(beer_data)
our_forecast_40 <- model_fit %>%
forecast(h = 40)
our_forecast_40 %>%
filter(.model == "snaive_model") %>%
autoplot(beer_data)
our_forecast_40 %>%
filter(.model == "mean_model") %>%
autoplot(beer_data)
rm(our_forecast_40_snaive)
our_forecast_40 <- model_fit %>%
forecast(h = 40)
our_forecast_40 %>%
filter(.model == "snaive_model") %>%
autoplot(beer_data)
our_forecast_40 %>%
filter(.model == "mean_model") %>%
autoplot(beer_data)
our_forecast_40 %>%
filter(.model == "arima_model") %>%
autoplot(beer_data)
#80/20 split - 80 training, 20 prediction.
#16 years of training could predict 4 years into the future.
beer_training <- beer_data %>%
filter_index("1990 Q1 ~ 2006 Q4")
#80/20 split - 80 training, 20 prediction.
#16 years of training could predict 4 years into the future.
beer_training <- beer_data %>%
filter_index("1990 Q1" ~ "2006 Q4")
#fit model on training data
fit_training <- beer_training %>%
model(arima_model = ARIMA(Beer),
snaive_model = SNAIVE(Beer))
#reate forecast based on the training data
forecast_training <- fit_training %>%
forecast(h = 12)
forecast_training %>%
autoplot(beer_training, level = NULL)
forecast_training %>%
autoplot(beer_training, level = NULL) +
autolayer(filter_index(beer_data, "2007 Q1" ~ .), color = "black")
forecast_training %>%
autoplot(beer_training, level = NULL) +
autolayer(filter_index(beer_data, "2007 Q1" ~ .), color = "grey")
accuracy_model <- accuracy(forecast_training, beer_data)
accuracy_model
accuracy_model %>%
arrange(RMSE)
install.packages("sf")
library(sf)
north_carolina <- st_read(system.file("shape/nc.shp", package = "sf"))
north_carolina <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
class(north_carolina)
view(north_carolina)
attr(north_carolina, "sf_column")
north_carolina_geometry
north_carolina_geometry <- st_geometry(north_carolina)
north_carolina_geometry
plot(north_carolina)
plot(north_carolina[1])
plot(north_carolina[1,1])
ggplot(north_carolina, aes(fill = AREA)) +
geom_sf() +
theme_bw()
install.packages(rnaturalearth)
install.packages(rnaturalearthdata)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("rgeos")
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
class(world)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
View(world)
ggplot(world) +
geom_sf()
ggplot(world) +
geom_sf(colour = "black", fill = "green")
ggplot(world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma")
options(scipen = 999)
ggplot(world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma")
options(scipen = 999)
ggplot(world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
names(world)
ggplot(world) +
geom_sf(aes(fill = gdp_md_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
ggplot(world) +
geom_sf(aes(fill = gdp_md_est)) +
scale_fill_viridis_c(option = "plasma")
ggplot(world) +
geom_sf(aes(fill = gdp_md_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
country_italy <- world %>%
filter(name == "Italy")
ggplot(country_italy) +
geom_sf()
country_transformed <- st_transform(country_italy, 3033)
country_transformed <- st_transform(country_italy, 3003)
ggplot(country_transformed) +
geom_sf()
plot(grid)
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "centers")
plot(grid)
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "polygons")
plot(grid)
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "centers")
plot(grid)
grid <- st_make_grid(country_transformed, cellsize = 5000, what = "centers")
plot(grid)
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "centers")
plot(grid)
dist <- st_distance(country_line, grid)
country_line <- st_cast(country_transformed, "MULTILINESTRING")
dist <- st_distance(country_line, grid)
dist
distance_plot <- data.frame(dist = as.vector(dist)/1000,
st_coordinates(grid))
distance_plot
ggplot(distance_plot) +
aes(X, Y, fill = dist) +
geom_tile() +
theme_void()
#Argentina - map by distance to the shoreline
country_arg <- world %>%
filter(name == "Argentina")
ggplot(country_arg) +
geom_sf()
country_transformed <- st_transform(country_arg, 22184)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 500000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 100000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 1000000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 200000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 150000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 175000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 15000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 150000, what = "centers")
plot(grid)
country_line <- st_cast(country_transformed, "MULTILINESTRING")
dist <- st_distance(country_line, grid)
dist
distance_plot <- data.frame(dist = as.vector(dist)/1000,
st_coordinates(grid))
distance_plot
ggplot(distance_plot) +
aes(X, Y, fill = dist) +
geom_tile() +
theme_void()
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 1500000, what = "centers")
plot(grid)
country_transformed <- st_transform(country_arg, 22184)
grid <- st_make_grid(country_transformed, cellsize = 10000, what = "centers")
plot(grid)
country_line <- st_cast(country_transformed, "MULTILINESTRING")
dist <- st_distance(country_line, grid)
dist
distance_plot <- data.frame(dist = as.vector(dist)/1000,
st_coordinates(grid))
distance_plot
ggplot(distance_plot) +
aes(X, Y, fill = dist) +
geom_tile() +
theme_void()
ggplot(distance_plot) +
aes(X, Y, fill = dist) +
geom_tile() +
theme_void()
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = TRUE)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf(aes(fil = pop_est)) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf(aes()) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
world_centers <- st_centroid(world$geometry)
world_centers <- st_centroid(world$geometry)
world_coordinates <- st_coordinates(world_centers)
world_points <- cbind(world, world_coordinates)
head(world_points)
ggplot(data = world) +
geom_sf(aes()) +
geom_text(data = world_points, aes(x = X, y = Y, label = name), check_overlap = TRUE) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
library(leaflet)
leaflet() %>%
addTiles()
leaflet() %>%
addTiles() %>%
addMarkers(lng = 174.768, lat = -36.852, popup = "Birth of R")
leaflet() %>%
addTiles() %>%
addMarkers(lng = 174.768, lat = -36.852, popup = "Birth of R")
library(jsonlite)
library(RCurl)
colarado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
water_data <- getURL(URLencode(colorado_data_url))
water_data <- getURL(URLencode(colarado_data_url))
view(water_data)
water_data <- getURL(URLencode(colarado_data_url))
water_data_df < - fromJSON(water_data) %>%
jsonlite::flatten(recursive = TRUE)
water_data <- getURL(URLencode(colarado_data_url))
water_data_df <- fromJSON(water_data) %>%
jsonlite::flatten(recursive = TRUE)
water_data_df
water_data_df_clean <- water_data_df %>%
mutate_at(vars(amount, location.latitude, location.longitude), as.numeric) %>%
filter(!is.na(location.latitude))
leaflet(water_data_df_clean)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude, radius = ~ amount/100)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude, radius = ~ amount/1000)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude, radius = ~ amount/1500)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude, radius = ~ amount/1500, weight = 1)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude, radius = ~ amount/500, weight = 1)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addCircleMarkers(lng = ~ location.longitude, lat = ~ location.latitude, radius = ~ amount/1000, weight = 1)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addMarkers(lng = ~ location.longitude, lat = ~ location.latitude)
leaflet(water_data_df_clean) %>%
addTiles() %>%
addMarkers(lng = ~ location.longitude, lat = ~ location.latitude, clusterOptions = markerClusterOptions())
