index_by(date_of_use) %>%
summarise(bike_hire_counts = n())
nyc_bikes_date_summary <- nyc_bikes_extra_cols %>%
index_by(day) %>%
summarise(bike_hire_counts = n())
nyc_bikes_date_summary
ggplot(bike_hire_by_day) +
aes(x = day_of_week, y = hire_count) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired")
##########################################
##########################################
bike_hire_by_month_day <- nyc_bikes_extra_cols %>%
group_by(year, month) %>%
index_by(day_of_week = ~ day(.)) %>%
summarise(hire_count = n())
ggplot(bike_hire_by_month_day) +
aes(x = day_of_week, y = hire_count, fill = month, colour = month) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired") +
facet_wrap(~ month, dir = "v")
nyc_bikes_filled <- nyc_bikes_date_summary %>%
fill_gaps(bike_hire_counts = as.integer(median(bike_hire_counts)))
ggplot(bike_hire_by_day) +
aes(x = day_of_week, y = hire_count) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired")
bike_hire_by_month_day <- nyc_bikes_extra_cols %>%
group_by(year, month) %>%
index_by(day_of_week = ~ day(.)) %>%
summarise(hire_count = n())
ggplot(bike_hire_by_month_day) +
aes(x = day_of_week, y = hire_count, fill = month, colour = month) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired") +
facet_wrap(~ month, dir = "v")
ggplot(nyc_bikes_filled) +
aes(x = day_of_week, y = hire_count) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired")
bike_hire_by_month_day <- nyc_bikes_extra_cols %>%
group_by(year, month) %>%
index_by(day_of_week = ~ day(.)) %>%
summarise(hire_count = n())
ggplot(bike_hire_by_month_day) +
aes(x = day_of_week, y = hire_count, fill = month, colour = month) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired") +
facet_wrap(~ month, dir = "v")
nyc_bikes_date_summary <- nyc_bikes_extra_cols %>%
index_by(day) %>%
summarise(bike_hire_counts = n())
nyc_bikes_date_summary
nyc_bikes_filled <- nyc_bikes_date_summary %>%
fill_gaps(bike_hire_counts = as.integer(median(bike_hire_counts)))
ggplot(bike_hire_by_day) +
aes(x = day_of_week, y = hire_count) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired")
##########################################
##########################################
bike_hire_by_month_day <- nyc_bikes_extra_cols %>%
group_by(year, month) %>%
index_by(day_of_week = ~ day(.)) %>%
summarise(hire_count = n())
ggplot(bike_hire_by_month_day) +
aes(x = day_of_week, y = hire_count, fill = month, colour = month) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired") +
facet_wrap(~ month, dir = "v")
bike_hire_model <- nyc_bikes_date_summary %>%
model(
snaive_rw_model = SNAIVE(hire_count),
mean_model = MEAN(hire_count),
arima_model = ARIMA(hire_count)
)
bike_hire_model <- nyc_bikes_date_summary %>%
model(
snaive_rw_model = SNAIVE(bike_hire_counts),
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
bike_hire_model
bike_hire_model_forecast <- bike_hire_model %>%
forecast(h = 120)
bike_hire_model_forecast %>%
autoplot(nyc_bikes_date_summary, level = NULL)
bike_hire_model_forecast <- bike_hire_model %>%
forecast(h = 120)
bike_hire_model_forecast %>%
autoplot(nyc_bikes_date_summary, level = NULL)
bike_hire_training <- nyc_bikes_date_summary
nyc_bikes_date_summary
fit_training <- bike_hire_training %>%
model(
#snaive_rw_model = SNAIVE(hire_count),
mean_model = MEAN(hire_count),
arima_model = ARIMA(hire_count)
)
fit_training <- bike_hire_training %>%
model(
snaive_rw_model = SNAIVE(hire_count),
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
fit_training <- bike_hire_training %>%
model(
snaive_rw_model = SNAIVE(bike_hire_counts),
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
forecast_training <- fit_training %>%
forecast(h = 14)
forecast_training %>%
autoplot(bike_hire_training) +
autolayer(filter_index(nyc_bikes_date_summary, "20" ~ . ))
model_accuracy <- accuracy(forecast_training, nyc_bikes_date_summary)
model_accuracy %>%
arrange(RMSE)
library(sf)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_longitude, y = start_latitude, fill = month) +
geom_point() +
facet_wrap(bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_longitude, y = start_latitude, fill = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_long, y = start_lat, fill = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_long, y = start_lat, colour = month, fill = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_long, y = start_lat, colour = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_long, y = start_lat, colour = month) +
geom_point() +
facet_grid(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_long, y = start_lat, colour = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = end_lat, y = end_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_lat, y = start_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = end_lat, y = end_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_lat, y = start_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id) +
labs(title = "Hire Start")
ggplot(nyc_bikes_extra_cols) +
aes(x = end_lat, y = end_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id) +
labs("Hire End")
nyc_bikes_spatial
nyc_bikes_spatial
nyc_bikes
forecast_training <- fit_training %>%
forecast(h = 73)
forecast_training <- fit_training %>%
forecast(h = 73)
forecast_training %>%
autoplot(bike_hire_training) +
autolayer(filter_index(nyc_bikes_date_summary, "20" ~ . ))
model_accuracy <- accuracy(forecast_training, nyc_bikes_date_summary)
model_accuracy %>%
arrange(RMSE)
bike_hire_model_forecast <- bike_hire_model %>%
forecast(h = 73)
bike_hire_model_forecast %>%
autoplot(nyc_bikes_date_summary, level = NULL)
bike_hire_training <- nyc_bikes_date_summary
bike_hire_training <- nyc_bikes_date_summary
fit_training <- bike_hire_training %>%
model(
#snaive_rw_model = SNAIVE(bike_hire_counts), ERROR: 1 error encountered for snaive_rw_model
#[1] Non-seasonal model specification provided, use RW() or provide a different lag             #specification.
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
forecast_training <- fit_training %>%
forecast(h = 73)
forecast_training %>%
autoplot(bike_hire_training) +
autolayer(filter_index(nyc_bikes_date_summary, "20" ~ . ))
model_accuracy <- accuracy(forecast_training, nyc_bikes_date_summary)
model_accuracy %>%
arrange(RMSE)
nyc_bikes_extra_cols <- nyc_bikes %>%
mutate(year = year(start_time),
month = month(start_time, label = TRUE),
day = day(start_time)
)
View(nyc_bikes)
nyc_bikes_extra_cols <- nyc_bikes %>%
mutate(year = year(start_time),
month = month(start_time, label = TRUE),
day = day(start_time)
)
bike_hire_by_month <- nyc_bikes_extra_cols %>%
index_by(month = ~ month(., label = TRUE)) %>%
summarise(hire_count = n())
ggplot(bike_hire_by_month) +
aes(x = month, y = hire_count) +
geom_line(group = 1) +
geom_point() +
labs(y = "Number of bikes hired",
x = "Month",
title = "Number of bikes hired in NYC every month")
nyc_bikes_date_summary <- nyc_bikes_extra_cols %>%
index_by(day) %>%
summarise(bike_hire_counts = n())
nyc_bikes_date_summary
nyc_bikes_filled <- nyc_bikes_date_summary %>%
fill_gaps(bike_hire_counts = as.integer(median(bike_hire_counts)))
ggplot(bike_hire_by_day) +
aes(x = day_of_week, y = hire_count) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired")
##########################################
##########################################
bike_hire_by_month_day <- nyc_bikes_extra_cols %>%
group_by(year, month) %>%
index_by(day_of_week = ~ day(.)) %>%
summarise(hire_count = n())
ggplot(bike_hire_by_month_day) +
aes(x = day_of_week, y = hire_count, fill = month, colour = month) +
geom_line() +
labs(y = "Number of bikes hired",
x = "Date",
title = "NYC bike hires by Date") +
scale_color_brewer(palette = "Paired") +
facet_wrap(~ month, dir = "v")
bike_hire_model <- nyc_bikes_date_summary %>%
model(
snaive_rw_model = SNAIVE(bike_hire_counts),
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
bike_hire_model
bike_hire_model_forecast <- bike_hire_model %>%
forecast(h = 73)
bike_hire_model_forecast %>%
autoplot(nyc_bikes_date_summary, level = NULL)
bike_hire_training <- nyc_bikes_date_summary
fit_training <- bike_hire_training %>%
model(
#snaive_rw_model = SNAIVE(bike_hire_counts), ERROR: 1 error encountered for snaive_rw_model
#[1] Non-seasonal model specification provided, use RW() or provide a different lag             #specification.
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
forecast_training <- fit_training %>%
forecast(h = 73)
forecast_training %>%
autoplot(bike_hire_training) +
autolayer(filter_index(nyc_bikes_date_summary, "20" ~ . ))
model_accuracy <- accuracy(forecast_training, nyc_bikes_date_summary)
model_accuracy %>%
arrange(RMSE)
library(sf)
ggplot(nyc_bikes_extra_cols) +
aes(x = start_lat, y = start_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id) +
labs(title = "Hire Start")
ggplot(nyc_bikes_extra_cols) +
aes(x = end_lat, y = end_long, colour = month) +
geom_point() +
facet_wrap(~ bike_id) +
labs(title = "Hire End")
ggplot()
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
world <- ne_countries()
city_NY <- world
world <- ne_countries()
world <- ne_countries()
city_NY <- world %>%
filter(city == "New York")
ggplot(city_NY) +
geom_sf()
city_NY <- world %>%
filter(city == "New York")
bike_hire_model_forecast <- bike_hire_model %>%
forecast(h = 292)
bike_hire_model_forecast %>%
autoplot(nyc_bikes_date_summary, level = NULL)
bike_hire_training <- nyc_bikes_date_summary
fit_training <- bike_hire_training %>%
model(
#snaive_rw_model = SNAIVE(bike_hire_counts), ERROR: 1 error encountered for snaive_rw_model
#[1] Non-seasonal model specification provided, use RW() or provide a different lag             #specification.
mean_model = MEAN(bike_hire_counts),
arima_model = ARIMA(bike_hire_counts)
)
forecast_training <- fit_training %>%
forecast(h = 73)
forecast_training %>%
autoplot(bike_hire_training) +
autolayer(filter_index(nyc_bikes_date_summary, "20" ~ . ))
model_accuracy <- accuracy(forecast_training, nyc_bikes_date_summary)
model_accuracy %>%
arrange(RMSE)
forecast_training %>%
autoplot(bike_hire_training) +
autolayer(filter_index(nyc_bikes_date_summary, "20" ~ ., colour = "black" ))
library(tidyverse)
library(lubridate)
library(tsibble)
library(tsibbledata)
library(fable)
nyc_bikes_data <- nyc_bikes
names(nyc_bikes_data)
dim(nyc_bikes_data)
head(nyc_bikes_data,3)
nyc_bikes_year <- nyc_bikes_data %>%
select(-gender, -type, -birth_year) %>%
mutate(year_of_use = year(start_time),
month_of_use = month(start_time, label = TRUE),
date_of_use = date(start_time)
)
head(nyc_bikes_year,3)
# count by month
nyc_bikes_month_summary <- nyc_bikes_year %>%
index_by(month_of_use) %>%
summarise(bike_hire_counts = n())
ggplot(nyc_bikes_month_summary) +
aes(x = month_of_use, y = bike_hire_counts) +
geom_point() +
geom_line(group = 1) +
ggtitle("Bike hire in NYC") +
xlab("Month") + ylab ("total count")
# count by date
nyc_bikes_date_summary <- nyc_bikes_year %>%
index_by(date_of_use) %>%
summarise(bike_hire_counts = n())
nyc_bikes_date_summary
ggplot(nyc_bikes_date_summary) +
aes(x = date_of_use, y = bike_hire_counts) +
geom_point() +
geom_line(group = 1) +
ggtitle("Bike hire in NYC") +
xlab("Date") + ylab ("total count")
# also works with autoplot
nyc_bikes_date_summary %>%
autoplot() +
ggtitle("Bike hire in NYC") +
xlab("Date") + ylab ("total count")
# count by date
nyc_bikes_date_summary <- nyc_bikes_year %>%
index_by(date_of_use) %>%
summarise(bike_hire_counts = n())
nyc_bikes_date_summary
# fill the gaps : here i'll use median as it's a decent summary of how bike rentals work (not overly affected by seasonal changes)
nyc_bikes_filled <- nyc_bikes_date_summary %>%
fill_gaps(bike_hire_counts = as.integer(median(bike_hire_counts)))
# build a model
bikes_fit <- nyc_bikes_filled %>%
model(
naive = NAIVE(bike_hire_counts),
mean_model = MEAN(bike_hire_counts),
snaive = SNAIVE(bike_hire_counts)
)
# build a forecast
bikes_forecast <- bikes_fit %>%
fabletools::forecast(h = 30*4)
bikes_forecast
bikes_forecast %>%
autoplot(nyc_bikes_filled, level = NULL)
# create a shorter interval to plot: years after 1980
bikes_shorter <- nyc_bikes_filled %>%
mutate(month = month(date_of_use)) %>%
filter(month >= 8)
# check one model at a time
bikes_forecast %>%
filter(.model == "snaive") %>%
autoplot(bikes_shorter, level = NULL)
## test model accuracy
# Set training data from Jan to Nov
train <- nyc_bikes_filled %>%
mutate(month = month(date_of_use)) %>%
filter(month <= 10)
# run the model on the training set
bikes_fit_test <- train %>%
model(
naive = NAIVE(bike_hire_counts),
mean_model = MEAN(bike_hire_counts),
snaive = SNAIVE(bike_hire_counts))
bikes_fit_test
# forecast from the training set
bikes_forecast_test <- bikes_fit_test %>%
fabletools::forecast(h = 12*6)
# Plot forecasts against actual values
bikes_forecast_test %>%
autoplot(train, level = NULL) +
autolayer(nyc_bikes_filled, color = "black")
# note accuracy, arrange by best
accuracy_model <- fabletools::accuracy(bikes_forecast_test, nyc_bikes_filled)
accuracy_model %>%
select(-.type) %>%
arrange(RMSE)
library(ggplot2)
# make the month
nyc_bikes_spatial <-nyc_bikes %>%
select(bike_id, start_time, start_lat, start_long, end_lat, end_long) %>%
mutate(month = month(start_time, label = TRUE))
# make a faceted plot : start points
ggplot(nyc_bikes_spatial) +
geom_point(aes(x=start_lat, y = start_long, colour = month)) +
facet_wrap(~bike_id) +
ggtitle("NYC bikes: start points") +
xlab("Latitude") + ylab("Longitude")
# make a faceted plot : end points
ggplot(nyc_bikes_spatial) +
geom_point(aes(x=end_lat, y = end_long, colour = month)) +
facet_wrap(~bike_id) +
ggtitle("NYC bikes : end points") +
xlab("Latitude") + ylab("Longitude")
# make a leaflet plot
library(leaflet)
# create leaflet map
leaflet(nyc_bikes_spatial) %>%
addTiles() %>%
addCircleMarkers(lng = ~start_long,
lat = ~start_lat) %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
# load the geosphere package to add intermediate points (lines)
library(geosphere)
# fill the gaps : here i'll use median as it's a decent summary of how bike rentals work (not overly affected by seasonal changes)
nyc_bikes_filled <- nyc_bikes_date_summary %>%
fill_gaps(bike_hire_counts = as.integer(median(bike_hire_counts)))
# fill the gaps : here i'll use median as it's a decent summary of how bike rentals work (not overly affected by seasonal changes)
nyc_bikes_filled <- nyc_bikes_date_summary %>%
fill_gaps(bike_hire_counts = as.integer(median(bike_hire_counts)))
# build a model
bikes_fit <- nyc_bikes_filled %>%
model(
naive = NAIVE(bike_hire_counts),
mean_model = MEAN(bike_hire_counts),
snaive = SNAIVE(bike_hire_counts)
)
install.packages("geosphere")
# load the geosphere package to add intermediate points (lines)
library(geosphere)
# load the geosphere package to add intermediate points (lines)
library(geosphere)
# subset the data to make it easier
bikes <- nyc_bikes_data %>%
select(bike_id, start_time, start_lat, start_long, end_lat, end_long)
# get start points (longitude has to go first)
start <- bikes %>%
select(start_long, start_lat)
# get end points (longitude has to go first)
end <- bikes %>%
select(end_long, end_lat)
# convert to matrix
start_matrix <- as.matrix(start[ , c(1,2)])
end_matrix <- as.matrix(end[ , c(1,2)])
# plot using leaflet
gcIntermediate(start_matrix, end_matrix,
n=100,
addStartEnd=TRUE,
sp=TRUE) %>%
leaflet() %>%
addTiles() %>%
addPolylines()
